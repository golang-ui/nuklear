// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated on Tue, 14 Nov 2023 12:28:21 +03.
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package nk

/*
#include "nk.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// NkRegisterClipboard function as declared in nk/nk.h:5
func NkRegisterClipboard(ctx *Context) {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.nk_register_clipboard(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// NkInitDefault function as declared in nk/nuklear.h:584
func NkInitDefault(arg0 *Context, arg1 *UserFont) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := arg1.PassRef()
	__ret := C.nk_init_default(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInitFixed function as declared in nk/nuklear.h:609
func NkInitFixed(arg0 *Context, memory unsafe.Pointer, size Size, arg3 *UserFont) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	carg3, carg3AllocMap := arg3.PassRef()
	__ret := C.nk_init_fixed(carg0, cmemory, csize, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInit function as declared in nk/nuklear.h:627
func NkInit(arg0 *Context, arg1 *Allocator, arg2 *UserFont) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_allocator)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := arg2.PassRef()
	__ret := C.nk_init(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInitCustom function as declared in nk/nuklear.h:646
func NkInitCustom(arg0 *Context, cmds *Buffer, pool *Buffer, arg3 *UserFont) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccmds, ccmdsAllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(cmds)), cgoAllocsUnknown
	cpool, cpoolAllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(pool)), cgoAllocsUnknown
	carg3, carg3AllocMap := arg3.PassRef()
	__ret := C.nk_init_custom(carg0, ccmds, cpool, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cpoolAllocMap)
	runtime.KeepAlive(ccmdsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkClear function as declared in nk/nuklear.h:660
func NkClear(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_clear(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFree function as declared in nk/nuklear.h:673
func NkFree(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_free(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkInputBegin function as declared in nk/nuklear.h:809
func NkInputBegin(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_input_begin(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkInputMotion function as declared in nk/nuklear.h:823
func NkInputMotion(arg0 *Context, x int32, y int32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	C.nk_input_motion(carg0, cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkInputKey function as declared in nk/nuklear.h:837
func NkInputKey(arg0 *Context, arg1 C.enum_, down Bool) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	cdown, cdownAllocMap := (C.nk_bool)(down), cgoAllocsUnknown
	C.nk_input_key(carg0, carg1, cdown)
	runtime.KeepAlive(cdownAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkInputButton function as declared in nk/nuklear.h:853
func NkInputButton(arg0 *Context, arg1 C.enum_, x int32, y int32, down Bool) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cdown, cdownAllocMap := (C.nk_bool)(down), cgoAllocsUnknown
	C.nk_input_button(carg0, carg1, cx, cy, cdown)
	runtime.KeepAlive(cdownAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkInputScroll function as declared in nk/nuklear.h:868
func NkInputScroll(arg0 *Context, val Vec2) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cval, cvalAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&val)), cgoAllocsUnknown
	C.nk_input_scroll(carg0, cval)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkInputChar function as declared in nk/nuklear.h:886
func NkInputChar(arg0 *Context, arg1 byte) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.char)(arg1), cgoAllocsUnknown
	C.nk_input_char(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkInputUnicode function as declared in nk/nuklear.h:919
func NkInputUnicode(arg0 *Context, arg1 Rune) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.nk_rune)(arg1), cgoAllocsUnknown
	C.nk_input_unicode(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkInputEnd function as declared in nk/nuklear.h:932
func NkInputEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_input_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// Nk_Begin function as declared in nk/nuklear.h:1200
func Nk_Begin(arg0 *Context) *Command {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk__begin(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**Command)(unsafe.Pointer(&__ret))
	return __v
}

// Nk_Next function as declared in nk/nuklear.h:1215
func Nk_Next(arg0 *Context, arg1 *Command) *Command {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_command)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk__next(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**Command)(unsafe.Pointer(&__ret))
	return __v
}

// NkConvert function as declared in nk/nuklear.h:1261
func NkConvert(arg0 *Context, cmds *Buffer, vertices *Buffer, elements *Buffer, arg4 *ConvertConfig) Flags {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccmds, ccmdsAllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(cmds)), cgoAllocsUnknown
	cvertices, cverticesAllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(vertices)), cgoAllocsUnknown
	celements, celementsAllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(elements)), cgoAllocsUnknown
	carg4, carg4AllocMap := arg4.PassRef()
	__ret := C.nk_convert(carg0, ccmds, cvertices, celements, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(celementsAllocMap)
	runtime.KeepAlive(cverticesAllocMap)
	runtime.KeepAlive(ccmdsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Flags)(__ret)
	return __v
}

// Nk_DrawBegin function as declared in nk/nuklear.h:1276
func Nk_DrawBegin(arg0 *Context, arg1 *Buffer) *DrawCommand {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk__draw_begin(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**DrawCommand)(unsafe.Pointer(&__ret))
	return __v
}

// Nk_DrawEnd function as declared in nk/nuklear.h:1291
func Nk_DrawEnd(arg0 *Context, arg1 *Buffer) *DrawCommand {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk__draw_end(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**DrawCommand)(unsafe.Pointer(&__ret))
	return __v
}

// Nk_DrawNext function as declared in nk/nuklear.h:1307
func Nk_DrawNext(arg0 *DrawCommand, arg1 *Buffer, arg2 *Context) *DrawCommand {
	carg0, carg0AllocMap := (*C.struct_nk_draw_command)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	__ret := C.nk__draw_next(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**DrawCommand)(unsafe.Pointer(&__ret))
	return __v
}

// NkBegin function as declared in nk/nuklear.h:1501
func NkBegin(ctx *Context, title string, bounds Rect, flags Flags) Bool {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	cbounds, cboundsAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&bounds)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.nk_flags)(flags), cgoAllocsUnknown
	__ret := C.nk_begin(cctx, ctitle, cbounds, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cboundsAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkBeginTitled function as declared in nk/nuklear.h:1521
func NkBeginTitled(ctx *Context, name string, title string, bounds Rect, flags Flags) Bool {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	cbounds, cboundsAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&bounds)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.nk_flags)(flags), cgoAllocsUnknown
	__ret := C.nk_begin_titled(cctx, cname, ctitle, cbounds, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(cboundsAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkEnd function as declared in nk/nuklear.h:1534
func NkEnd(ctx *Context) {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	C.nk_end(cctx)
	runtime.KeepAlive(cctxAllocMap)
}

// NkWindowFind function as declared in nk/nuklear.h:1550
func NkWindowFind(ctx *Context, name string) *Window {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.nk_window_find(cctx, cname)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(**Window)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetBounds function as declared in nk/nuklear.h:1566
func NkWindowGetBounds(ctx *Context) Rect {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.nk_window_get_bounds(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetPosition function as declared in nk/nuklear.h:1582
func NkWindowGetPosition(ctx *Context) Vec2 {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	__ret := C.nk_window_get_position(cctx)
	runtime.KeepAlive(cctxAllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetSize function as declared in nk/nuklear.h:1598
func NkWindowGetSize(arg0 *Context) Vec2 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_get_size(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetWidth function as declared in nk/nuklear.h:1614
func NkWindowGetWidth(arg0 *Context) float32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_get_width(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// NkWindowGetHeight function as declared in nk/nuklear.h:1630
func NkWindowGetHeight(arg0 *Context) float32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_get_height(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// NkWindowGetPanel function as declared in nk/nuklear.h:1648
func NkWindowGetPanel(arg0 *Context) *Panel {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_get_panel(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**Panel)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetContentRegion function as declared in nk/nuklear.h:1667
func NkWindowGetContentRegion(arg0 *Context) Rect {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_get_content_region(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetContentRegionMin function as declared in nk/nuklear.h:1686
func NkWindowGetContentRegionMin(arg0 *Context) Vec2 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_get_content_region_min(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetContentRegionMax function as declared in nk/nuklear.h:1705
func NkWindowGetContentRegionMax(arg0 *Context) Vec2 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_get_content_region_max(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetContentRegionSize function as declared in nk/nuklear.h:1723
func NkWindowGetContentRegionSize(arg0 *Context) Vec2 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_get_content_region_size(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetCanvas function as declared in nk/nuklear.h:1742
func NkWindowGetCanvas(arg0 *Context) *CommandBuffer {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_get_canvas(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**CommandBuffer)(unsafe.Pointer(&__ret))
	return __v
}

// NkWindowGetScroll function as declared in nk/nuklear.h:1758
func NkWindowGetScroll(arg0 *Context, offsetX *Uint, offsetY *Uint) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	coffsetX, coffsetXAllocMap := (*C.nk_uint)(unsafe.Pointer(offsetX)), cgoAllocsUnknown
	coffsetY, coffsetYAllocMap := (*C.nk_uint)(unsafe.Pointer(offsetY)), cgoAllocsUnknown
	C.nk_window_get_scroll(carg0, coffsetX, coffsetY)
	runtime.KeepAlive(coffsetYAllocMap)
	runtime.KeepAlive(coffsetXAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWindowHasFocus function as declared in nk/nuklear.h:1773
func NkWindowHasFocus(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_has_focus(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkWindowIsHovered function as declared in nk/nuklear.h:1788
func NkWindowIsHovered(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_is_hovered(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkWindowIsCollapsed function as declared in nk/nuklear.h:1803
func NkWindowIsCollapsed(ctx *Context, name string) Bool {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	__ret := C.nk_window_is_collapsed(cctx, cname)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkWindowIsClosed function as declared in nk/nuklear.h:1817
func NkWindowIsClosed(arg0 *Context, arg1 *byte) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk_window_is_closed(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkWindowIsHidden function as declared in nk/nuklear.h:1831
func NkWindowIsHidden(arg0 *Context, arg1 *byte) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk_window_is_hidden(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkWindowIsActive function as declared in nk/nuklear.h:1845
func NkWindowIsActive(arg0 *Context, arg1 *byte) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk_window_is_active(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkWindowIsAnyHovered function as declared in nk/nuklear.h:1858
func NkWindowIsAnyHovered(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_window_is_any_hovered(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkItemIsAnyActive function as declared in nk/nuklear.h:1873
func NkItemIsAnyActive(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_item_is_any_active(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkWindowSetBounds function as declared in nk/nuklear.h:1886
func NkWindowSetBounds(arg0 *Context, name string, bounds Rect) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	cbounds, cboundsAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&bounds)), cgoAllocsUnknown
	C.nk_window_set_bounds(carg0, cname, cbounds)
	runtime.KeepAlive(cboundsAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWindowSetPosition function as declared in nk/nuklear.h:1899
func NkWindowSetPosition(arg0 *Context, name string, pos Vec2) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	cpos, cposAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&pos)), cgoAllocsUnknown
	C.nk_window_set_position(carg0, cname, cpos)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWindowSetSize function as declared in nk/nuklear.h:1912
func NkWindowSetSize(arg0 *Context, name string, arg2 Vec2) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	carg2, carg2AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	C.nk_window_set_size(carg0, cname, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWindowSetFocus function as declared in nk/nuklear.h:1924
func NkWindowSetFocus(arg0 *Context, name string) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	C.nk_window_set_focus(carg0, cname)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWindowSetScroll function as declared in nk/nuklear.h:1940
func NkWindowSetScroll(arg0 *Context, offsetX Uint, offsetY Uint) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	coffsetX, coffsetXAllocMap := (C.nk_uint)(offsetX), cgoAllocsUnknown
	coffsetY, coffsetYAllocMap := (C.nk_uint)(offsetY), cgoAllocsUnknown
	C.nk_window_set_scroll(carg0, coffsetX, coffsetY)
	runtime.KeepAlive(coffsetYAllocMap)
	runtime.KeepAlive(coffsetXAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWindowClose function as declared in nk/nuklear.h:1952
func NkWindowClose(ctx *Context, name string) {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	C.nk_window_close(cctx, cname)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// NkWindowCollapse function as declared in nk/nuklear.h:1965
func NkWindowCollapse(arg0 *Context, name string, state C.enum_) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	cstate, cstateAllocMap := (C.enum_)(state), cgoAllocsUnknown
	C.nk_window_collapse(carg0, cname, cstate)
	runtime.KeepAlive(cstateAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWindowCollapseIf function as declared in nk/nuklear.h:1979
func NkWindowCollapseIf(arg0 *Context, name string, arg2 C.enum_, cond int32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	carg2, carg2AllocMap := (C.enum_)(arg2), cgoAllocsUnknown
	ccond, ccondAllocMap := (C.int)(cond), cgoAllocsUnknown
	C.nk_window_collapse_if(carg0, cname, carg2, ccond)
	runtime.KeepAlive(ccondAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWindowShow function as declared in nk/nuklear.h:1992
func NkWindowShow(arg0 *Context, name string, arg2 C.enum_) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	carg2, carg2AllocMap := (C.enum_)(arg2), cgoAllocsUnknown
	C.nk_window_show(carg0, cname, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWindowShowIf function as declared in nk/nuklear.h:2006
func NkWindowShowIf(arg0 *Context, name string, arg2 C.enum_, cond int32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	carg2, carg2AllocMap := (C.enum_)(arg2), cgoAllocsUnknown
	ccond, ccondAllocMap := (C.int)(cond), cgoAllocsUnknown
	C.nk_window_show_if(carg0, cname, carg2, ccond)
	runtime.KeepAlive(ccondAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutSetMinRowHeight function as declared in nk/nuklear.h:2295
func NkLayoutSetMinRowHeight(arg0 *Context, height float32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	C.nk_layout_set_min_row_height(carg0, cheight)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutResetMinRowHeight function as declared in nk/nuklear.h:2306
func NkLayoutResetMinRowHeight(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_layout_reset_min_row_height(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutWidgetBounds function as declared in nk/nuklear.h:2319
func NkLayoutWidgetBounds(arg0 *Context) Rect {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_layout_widget_bounds(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutRatioFromPixel function as declared in nk/nuklear.h:2333
func NkLayoutRatioFromPixel(arg0 *Context, pixelWidth float32) float32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpixelWidth, cpixelWidthAllocMap := (C.float)(pixelWidth), cgoAllocsUnknown
	__ret := C.nk_layout_ratio_from_pixel(carg0, cpixelWidth)
	runtime.KeepAlive(cpixelWidthAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// NkLayoutRowDynamic function as declared in nk/nuklear.h:2348
func NkLayoutRowDynamic(ctx *Context, height float32, cols int32) {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	ccols, ccolsAllocMap := (C.int)(cols), cgoAllocsUnknown
	C.nk_layout_row_dynamic(cctx, cheight, ccols)
	runtime.KeepAlive(ccolsAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// NkLayoutRowStatic function as declared in nk/nuklear.h:2364
func NkLayoutRowStatic(ctx *Context, height float32, itemWidth int32, cols int32) {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	citemWidth, citemWidthAllocMap := (C.int)(itemWidth), cgoAllocsUnknown
	ccols, ccolsAllocMap := (C.int)(cols), cgoAllocsUnknown
	C.nk_layout_row_static(cctx, cheight, citemWidth, ccols)
	runtime.KeepAlive(ccolsAllocMap)
	runtime.KeepAlive(citemWidthAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// NkLayoutRowBegin function as declared in nk/nuklear.h:2378
func NkLayoutRowBegin(ctx *Context, fmt C.enum_, rowHeight float32, cols int32) {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cfmt, cfmtAllocMap := (C.enum_)(fmt), cgoAllocsUnknown
	crowHeight, crowHeightAllocMap := (C.float)(rowHeight), cgoAllocsUnknown
	ccols, ccolsAllocMap := (C.int)(cols), cgoAllocsUnknown
	C.nk_layout_row_begin(cctx, cfmt, crowHeight, ccols)
	runtime.KeepAlive(ccolsAllocMap)
	runtime.KeepAlive(crowHeightAllocMap)
	runtime.KeepAlive(cfmtAllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// NkLayoutRowPush function as declared in nk/nuklear.h:2390
func NkLayoutRowPush(arg0 *Context, value float32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.float)(value), cgoAllocsUnknown
	C.nk_layout_row_push(carg0, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutRowEnd function as declared in nk/nuklear.h:2401
func NkLayoutRowEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_layout_row_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutRow function as declared in nk/nuklear.h:2415
func NkLayoutRow(arg0 *Context, arg1 C.enum_, height float32, cols int32, ratio []float32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	ccols, ccolsAllocMap := (C.int)(cols), cgoAllocsUnknown
	cratio, cratioAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&ratio)))
	C.nk_layout_row(carg0, carg1, cheight, ccols, cratio)
	runtime.KeepAlive(cratioAllocMap)
	runtime.KeepAlive(ccolsAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutRowTemplateBegin function as declared in nk/nuklear.h:2427
func NkLayoutRowTemplateBegin(arg0 *Context, rowHeight float32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	crowHeight, crowHeightAllocMap := (C.float)(rowHeight), cgoAllocsUnknown
	C.nk_layout_row_template_begin(carg0, crowHeight)
	runtime.KeepAlive(crowHeightAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutRowTemplatePushDynamic function as declared in nk/nuklear.h:2439
func NkLayoutRowTemplatePushDynamic(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_layout_row_template_push_dynamic(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutRowTemplatePushVariable function as declared in nk/nuklear.h:2451
func NkLayoutRowTemplatePushVariable(arg0 *Context, minWidth float32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cminWidth, cminWidthAllocMap := (C.float)(minWidth), cgoAllocsUnknown
	C.nk_layout_row_template_push_variable(carg0, cminWidth)
	runtime.KeepAlive(cminWidthAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutRowTemplatePushStatic function as declared in nk/nuklear.h:2463
func NkLayoutRowTemplatePushStatic(arg0 *Context, width float32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.float)(width), cgoAllocsUnknown
	C.nk_layout_row_template_push_static(carg0, cwidth)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutRowTemplateEnd function as declared in nk/nuklear.h:2474
func NkLayoutRowTemplateEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_layout_row_template_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutSpaceBegin function as declared in nk/nuklear.h:2488
func NkLayoutSpaceBegin(arg0 *Context, arg1 C.enum_, height float32, widgetCount int32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	cwidgetCount, cwidgetCountAllocMap := (C.int)(widgetCount), cgoAllocsUnknown
	C.nk_layout_space_begin(carg0, carg1, cheight, cwidgetCount)
	runtime.KeepAlive(cwidgetCountAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutSpacePush function as declared in nk/nuklear.h:2500
func NkLayoutSpacePush(arg0 *Context, bounds Rect) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cbounds, cboundsAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&bounds)), cgoAllocsUnknown
	C.nk_layout_space_push(carg0, cbounds)
	runtime.KeepAlive(cboundsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutSpaceEnd function as declared in nk/nuklear.h:2511
func NkLayoutSpaceEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_layout_space_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLayoutSpaceBounds function as declared in nk/nuklear.h:2524
func NkLayoutSpaceBounds(arg0 *Context) Rect {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_layout_space_bounds(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutSpaceToScreen function as declared in nk/nuklear.h:2538
func NkLayoutSpaceToScreen(arg0 *Context, arg1 Vec2) Vec2 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	__ret := C.nk_layout_space_to_screen(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutSpaceToLocal function as declared in nk/nuklear.h:2552
func NkLayoutSpaceToLocal(arg0 *Context, arg1 Vec2) Vec2 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	__ret := C.nk_layout_space_to_local(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutSpaceRectToScreen function as declared in nk/nuklear.h:2566
func NkLayoutSpaceRectToScreen(arg0 *Context, arg1 Rect) Rect {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	__ret := C.nk_layout_space_rect_to_screen(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkLayoutSpaceRectToLocal function as declared in nk/nuklear.h:2580
func NkLayoutSpaceRectToLocal(arg0 *Context, arg1 Rect) Rect {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	__ret := C.nk_layout_space_rect_to_local(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkSpacer function as declared in nk/nuklear.h:2593
func NkSpacer(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_spacer(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkGroupBegin function as declared in nk/nuklear.h:2698
func NkGroupBegin(arg0 *Context, title string, arg2 Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	carg2, carg2AllocMap := (C.nk_flags)(arg2), cgoAllocsUnknown
	__ret := C.nk_group_begin(carg0, ctitle, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkGroupBeginTitled function as declared in nk/nuklear.h:2714
func NkGroupBeginTitled(arg0 *Context, name string, title string, arg3 Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	carg3, carg3AllocMap := (C.nk_flags)(arg3), cgoAllocsUnknown
	__ret := C.nk_group_begin_titled(carg0, cname, ctitle, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkGroupEnd function as declared in nk/nuklear.h:2725
func NkGroupEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_group_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkGroupScrolledOffsetBegin function as declared in nk/nuklear.h:2743
func NkGroupScrolledOffsetBegin(arg0 *Context, xOffset *Uint, yOffset *Uint, title string, flags Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cxOffset, cxOffsetAllocMap := (*C.nk_uint)(unsafe.Pointer(xOffset)), cgoAllocsUnknown
	cyOffset, cyOffsetAllocMap := (*C.nk_uint)(unsafe.Pointer(yOffset)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	cflags, cflagsAllocMap := (C.nk_flags)(flags), cgoAllocsUnknown
	__ret := C.nk_group_scrolled_offset_begin(carg0, cxOffset, cyOffset, ctitle, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(cyOffsetAllocMap)
	runtime.KeepAlive(cxOffsetAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkGroupScrolledBegin function as declared in nk/nuklear.h:2760
func NkGroupScrolledBegin(arg0 *Context, off *Scroll, title string, arg3 Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	coff, coffAllocMap := (*C.struct_nk_scroll)(unsafe.Pointer(off)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	carg3, carg3AllocMap := (C.nk_flags)(arg3), cgoAllocsUnknown
	__ret := C.nk_group_scrolled_begin(carg0, coff, ctitle, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(coffAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkGroupScrolledEnd function as declared in nk/nuklear.h:2771
func NkGroupScrolledEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_group_scrolled_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkGroupGetScroll function as declared in nk/nuklear.h:2785
func NkGroupGetScroll(arg0 *Context, id string, xOffset *Uint, yOffset *Uint) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	id = safeString(id)
	cid, cidAllocMap := unpackPCharString(id)
	cxOffset, cxOffsetAllocMap := (*C.nk_uint)(unsafe.Pointer(xOffset)), cgoAllocsUnknown
	cyOffset, cyOffsetAllocMap := (*C.nk_uint)(unsafe.Pointer(yOffset)), cgoAllocsUnknown
	C.nk_group_get_scroll(carg0, cid, cxOffset, cyOffset)
	runtime.KeepAlive(cyOffsetAllocMap)
	runtime.KeepAlive(cxOffsetAllocMap)
	runtime.KeepAlive(id)
	runtime.KeepAlive(cidAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkGroupSetScroll function as declared in nk/nuklear.h:2799
func NkGroupSetScroll(arg0 *Context, id string, xOffset Uint, yOffset Uint) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	id = safeString(id)
	cid, cidAllocMap := unpackPCharString(id)
	cxOffset, cxOffsetAllocMap := (C.nk_uint)(xOffset), cgoAllocsUnknown
	cyOffset, cyOffsetAllocMap := (C.nk_uint)(yOffset), cgoAllocsUnknown
	C.nk_group_set_scroll(carg0, cid, cxOffset, cyOffset)
	runtime.KeepAlive(cyOffsetAllocMap)
	runtime.KeepAlive(cxOffsetAllocMap)
	runtime.KeepAlive(id)
	runtime.KeepAlive(cidAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTreePushHashed function as declared in nk/nuklear.h:2928
func NkTreePushHashed(arg0 *Context, arg1 C.enum_, title string, initialState C.enum_, hash string, len int32, seed int32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	cinitialState, cinitialStateAllocMap := (C.enum_)(initialState), cgoAllocsUnknown
	hash = safeString(hash)
	chash, chashAllocMap := unpackPCharString(hash)
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	cseed, cseedAllocMap := (C.int)(seed), cgoAllocsUnknown
	__ret := C.nk_tree_push_hashed(carg0, carg1, ctitle, cinitialState, chash, clen, cseed)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(hash)
	runtime.KeepAlive(chashAllocMap)
	runtime.KeepAlive(cinitialStateAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTreeImagePushHashed function as declared in nk/nuklear.h:2992
func NkTreeImagePushHashed(arg0 *Context, arg1 C.enum_, arg2 Image, title string, initialState C.enum_, hash string, len int32, seed int32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	cinitialState, cinitialStateAllocMap := (C.enum_)(initialState), cgoAllocsUnknown
	hash = safeString(hash)
	chash, chashAllocMap := unpackPCharString(hash)
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	cseed, cseedAllocMap := (C.int)(seed), cgoAllocsUnknown
	__ret := C.nk_tree_image_push_hashed(carg0, carg1, carg2, ctitle, cinitialState, chash, clen, cseed)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(hash)
	runtime.KeepAlive(chashAllocMap)
	runtime.KeepAlive(cinitialStateAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTreePop function as declared in nk/nuklear.h:3003
func NkTreePop(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_tree_pop(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTreeStatePush function as declared in nk/nuklear.h:3019
func NkTreeStatePush(arg0 *Context, arg1 C.enum_, title string, state *C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	cstate, cstateAllocMap := (*C.enum_)(unsafe.Pointer(state)), cgoAllocsUnknown
	__ret := C.nk_tree_state_push(carg0, carg1, ctitle, cstate)
	runtime.KeepAlive(cstateAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTreeStateImagePush function as declared in nk/nuklear.h:3036
func NkTreeStateImagePush(arg0 *Context, arg1 C.enum_, arg2 Image, title string, state []C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	cstate, cstateAllocMap := copyPEnumBytes((*sliceHeader)(unsafe.Pointer(&state)))
	__ret := C.nk_tree_state_image_push(carg0, carg1, carg2, ctitle, cstate)
	runtime.KeepAlive(cstateAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTreeStatePop function as declared in nk/nuklear.h:3047
func NkTreeStatePop(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_tree_state_pop(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTreeElementPushHashed function as declared in nk/nuklear.h:3051
func NkTreeElementPushHashed(arg0 *Context, arg1 C.enum_, title string, initialState C.enum_, selected []Bool, hash string, len int32, seed int32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	cinitialState, cinitialStateAllocMap := (C.enum_)(initialState), cgoAllocsUnknown
	cselected, cselectedAllocMap := copyPBoolBytes((*sliceHeader)(unsafe.Pointer(&selected)))
	hash = safeString(hash)
	chash, chashAllocMap := unpackPCharString(hash)
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	cseed, cseedAllocMap := (C.int)(seed), cgoAllocsUnknown
	__ret := C.nk_tree_element_push_hashed(carg0, carg1, ctitle, cinitialState, cselected, chash, clen, cseed)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(hash)
	runtime.KeepAlive(chashAllocMap)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(cinitialStateAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTreeElementImagePushHashed function as declared in nk/nuklear.h:3052
func NkTreeElementImagePushHashed(arg0 *Context, arg1 C.enum_, arg2 Image, title string, initialState C.enum_, selected []Bool, hash string, len int32, seed int32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	cinitialState, cinitialStateAllocMap := (C.enum_)(initialState), cgoAllocsUnknown
	cselected, cselectedAllocMap := copyPBoolBytes((*sliceHeader)(unsafe.Pointer(&selected)))
	hash = safeString(hash)
	chash, chashAllocMap := unpackPCharString(hash)
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	cseed, cseedAllocMap := (C.int)(seed), cgoAllocsUnknown
	__ret := C.nk_tree_element_image_push_hashed(carg0, carg1, carg2, ctitle, cinitialState, cselected, chash, clen, cseed)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(hash)
	runtime.KeepAlive(chashAllocMap)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(cinitialStateAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTreeElementPop function as declared in nk/nuklear.h:3053
func NkTreeElementPop(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_tree_element_pop(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkListViewBegin function as declared in nk/nuklear.h:3069
func NkListViewBegin(arg0 *Context, out *ListView, id string, arg3 Flags, rowHeight int32, rowCount int32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cout, coutAllocMap := (*C.struct_nk_list_view)(unsafe.Pointer(out)), cgoAllocsUnknown
	id = safeString(id)
	cid, cidAllocMap := unpackPCharString(id)
	carg3, carg3AllocMap := (C.nk_flags)(arg3), cgoAllocsUnknown
	crowHeight, crowHeightAllocMap := (C.int)(rowHeight), cgoAllocsUnknown
	crowCount, crowCountAllocMap := (C.int)(rowCount), cgoAllocsUnknown
	__ret := C.nk_list_view_begin(carg0, cout, cid, carg3, crowHeight, crowCount)
	runtime.KeepAlive(crowCountAllocMap)
	runtime.KeepAlive(crowHeightAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(id)
	runtime.KeepAlive(cidAllocMap)
	runtime.KeepAlive(coutAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkListViewEnd function as declared in nk/nuklear.h:3070
func NkListViewEnd(arg0 *ListView) {
	carg0, carg0AllocMap := (*C.struct_nk_list_view)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_list_view_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkWidget function as declared in nk/nuklear.h:3091
func NkWidget(arg0 *Rect, arg1 *Context) C.enum_ {
	carg0, carg0AllocMap := (*C.struct_nk_rect)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk_widget(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (C.enum_)(__ret)
	return __v
}

// NkWidgetFitting function as declared in nk/nuklear.h:3092
func NkWidgetFitting(arg0 *Rect, arg1 *Context, arg2 Vec2) C.enum_ {
	carg0, carg0AllocMap := (*C.struct_nk_rect)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	__ret := C.nk_widget_fitting(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (C.enum_)(__ret)
	return __v
}

// NkWidgetBounds function as declared in nk/nuklear.h:3093
func NkWidgetBounds(arg0 *Context) Rect {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_widget_bounds(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkWidgetPosition function as declared in nk/nuklear.h:3094
func NkWidgetPosition(arg0 *Context) Vec2 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_widget_position(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkWidgetSize function as declared in nk/nuklear.h:3095
func NkWidgetSize(arg0 *Context) Vec2 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_widget_size(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkWidgetWidth function as declared in nk/nuklear.h:3096
func NkWidgetWidth(arg0 *Context) float32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_widget_width(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// NkWidgetHeight function as declared in nk/nuklear.h:3097
func NkWidgetHeight(arg0 *Context) float32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_widget_height(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// NkWidgetIsHovered function as declared in nk/nuklear.h:3098
func NkWidgetIsHovered(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_widget_is_hovered(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkWidgetIsMouseClicked function as declared in nk/nuklear.h:3099
func NkWidgetIsMouseClicked(arg0 *Context, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_widget_is_mouse_clicked(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkWidgetHasMouseClickDown function as declared in nk/nuklear.h:3100
func NkWidgetHasMouseClickDown(arg0 *Context, arg1 C.enum_, down Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	cdown, cdownAllocMap := (C.nk_bool)(down), cgoAllocsUnknown
	__ret := C.nk_widget_has_mouse_click_down(carg0, carg1, cdown)
	runtime.KeepAlive(cdownAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSpacing function as declared in nk/nuklear.h:3101
func NkSpacing(arg0 *Context, cols int32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccols, ccolsAllocMap := (C.int)(cols), cgoAllocsUnknown
	C.nk_spacing(carg0, ccols)
	runtime.KeepAlive(ccolsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkText function as declared in nk/nuklear.h:3120
func NkText(arg0 *Context, arg1 *byte, arg2 int32, arg3 Flags) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.nk_flags)(arg3), cgoAllocsUnknown
	C.nk_text(carg0, carg1, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTextColored function as declared in nk/nuklear.h:3121
func NkTextColored(arg0 *Context, arg1 *byte, arg2 int32, arg3 Flags, arg4 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.nk_flags)(arg3), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	C.nk_text_colored(carg0, carg1, carg2, carg3, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTextWrap function as declared in nk/nuklear.h:3122
func NkTextWrap(arg0 *Context, arg1 *byte, arg2 int32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	C.nk_text_wrap(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTextWrapColored function as declared in nk/nuklear.h:3123
func NkTextWrapColored(arg0 *Context, arg1 *byte, arg2 int32, arg3 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_text_wrap_colored(carg0, carg1, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLabel function as declared in nk/nuklear.h:3124
func NkLabel(arg0 *Context, arg1 *byte, align Flags) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	C.nk_label(carg0, carg1, calign)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLabelColored function as declared in nk/nuklear.h:3125
func NkLabelColored(arg0 *Context, arg1 *byte, align Flags, arg3 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_label_colored(carg0, carg1, calign, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLabelWrap function as declared in nk/nuklear.h:3126
func NkLabelWrap(arg0 *Context, arg1 *byte) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.nk_label_wrap(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkLabelColoredWrap function as declared in nk/nuklear.h:3127
func NkLabelColoredWrap(arg0 *Context, arg1 *byte, arg2 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	C.nk_label_colored_wrap(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkImage function as declared in nk/nuklear.h:3128
func NkImage(arg0 *Context, arg1 Image) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_image(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkImageColor function as declared in nk/nuklear.h:3129
func NkImageColor(arg0 *Context, arg1 Image, arg2 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	C.nk_image_color(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkButtonText function as declared in nk/nuklear.h:3152
func NkButtonText(arg0 *Context, title string, len int32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	__ret := C.nk_button_text(carg0, ctitle, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonLabel function as declared in nk/nuklear.h:3153
func NkButtonLabel(arg0 *Context, title string) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	__ret := C.nk_button_label(carg0, ctitle)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonColor function as declared in nk/nuklear.h:3154
func NkButtonColor(arg0 *Context, arg1 Color) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	__ret := C.nk_button_color(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonSymbol function as declared in nk/nuklear.h:3155
func NkButtonSymbol(arg0 *Context, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_button_symbol(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonImage function as declared in nk/nuklear.h:3156
func NkButtonImage(arg0 *Context, img Image) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cimg, cimgAllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&img)), cgoAllocsUnknown
	__ret := C.nk_button_image(carg0, cimg)
	runtime.KeepAlive(cimgAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonSymbolLabel function as declared in nk/nuklear.h:3157
func NkButtonSymbolLabel(arg0 *Context, arg1 C.enum_, arg2 *byte, textAlignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	ctextAlignment, ctextAlignmentAllocMap := (C.nk_flags)(textAlignment), cgoAllocsUnknown
	__ret := C.nk_button_symbol_label(carg0, carg1, carg2, ctextAlignment)
	runtime.KeepAlive(ctextAlignmentAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonSymbolText function as declared in nk/nuklear.h:3158
func NkButtonSymbolText(arg0 *Context, arg1 C.enum_, arg2 *byte, arg3 int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_button_symbol_text(carg0, carg1, carg2, carg3, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonImageLabel function as declared in nk/nuklear.h:3159
func NkButtonImageLabel(arg0 *Context, img Image, arg2 *byte, textAlignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cimg, cimgAllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&img)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	ctextAlignment, ctextAlignmentAllocMap := (C.nk_flags)(textAlignment), cgoAllocsUnknown
	__ret := C.nk_button_image_label(carg0, cimg, carg2, ctextAlignment)
	runtime.KeepAlive(ctextAlignmentAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cimgAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonImageText function as declared in nk/nuklear.h:3160
func NkButtonImageText(arg0 *Context, img Image, arg2 *byte, arg3 int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cimg, cimgAllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&img)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_button_image_text(carg0, cimg, carg2, carg3, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cimgAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonTextStyled function as declared in nk/nuklear.h:3161
func NkButtonTextStyled(arg0 *Context, arg1 *StyleButton, title string, len int32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_style_button)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	__ret := C.nk_button_text_styled(carg0, carg1, ctitle, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonLabelStyled function as declared in nk/nuklear.h:3162
func NkButtonLabelStyled(arg0 *Context, arg1 *StyleButton, title string) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_style_button)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	__ret := C.nk_button_label_styled(carg0, carg1, ctitle)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonSymbolStyled function as declared in nk/nuklear.h:3163
func NkButtonSymbolStyled(arg0 *Context, arg1 *StyleButton, arg2 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_style_button)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.enum_)(arg2), cgoAllocsUnknown
	__ret := C.nk_button_symbol_styled(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonImageStyled function as declared in nk/nuklear.h:3164
func NkButtonImageStyled(arg0 *Context, arg1 *StyleButton, img Image) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_style_button)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cimg, cimgAllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&img)), cgoAllocsUnknown
	__ret := C.nk_button_image_styled(carg0, carg1, cimg)
	runtime.KeepAlive(cimgAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonSymbolTextStyled function as declared in nk/nuklear.h:3165
func NkButtonSymbolTextStyled(arg0 *Context, arg1 *StyleButton, arg2 C.enum_, arg3 *byte, arg4 int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_style_button)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.enum_)(arg2), cgoAllocsUnknown
	carg3, carg3AllocMap := (*C.char)(unsafe.Pointer(arg3)), cgoAllocsUnknown
	carg4, carg4AllocMap := (C.int)(arg4), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_button_symbol_text_styled(carg0, carg1, carg2, carg3, carg4, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonSymbolLabelStyled function as declared in nk/nuklear.h:3166
func NkButtonSymbolLabelStyled(ctx *Context, style *StyleButton, symbol C.enum_, title string, align Flags) Bool {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	cstyle, cstyleAllocMap := (*C.struct_nk_style_button)(unsafe.Pointer(style)), cgoAllocsUnknown
	csymbol, csymbolAllocMap := (C.enum_)(symbol), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	__ret := C.nk_button_symbol_label_styled(cctx, cstyle, csymbol, ctitle, calign)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(csymbolAllocMap)
	runtime.KeepAlive(cstyleAllocMap)
	runtime.KeepAlive(cctxAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonImageLabelStyled function as declared in nk/nuklear.h:3167
func NkButtonImageLabelStyled(arg0 *Context, arg1 *StyleButton, img Image, arg3 *byte, textAlignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_style_button)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cimg, cimgAllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&img)), cgoAllocsUnknown
	carg3, carg3AllocMap := (*C.char)(unsafe.Pointer(arg3)), cgoAllocsUnknown
	ctextAlignment, ctextAlignmentAllocMap := (C.nk_flags)(textAlignment), cgoAllocsUnknown
	__ret := C.nk_button_image_label_styled(carg0, carg1, cimg, carg3, ctextAlignment)
	runtime.KeepAlive(ctextAlignmentAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cimgAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonImageTextStyled function as declared in nk/nuklear.h:3168
func NkButtonImageTextStyled(arg0 *Context, arg1 *StyleButton, img Image, arg3 *byte, arg4 int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_style_button)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cimg, cimgAllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&img)), cgoAllocsUnknown
	carg3, carg3AllocMap := (*C.char)(unsafe.Pointer(arg3)), cgoAllocsUnknown
	carg4, carg4AllocMap := (C.int)(arg4), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_button_image_text_styled(carg0, carg1, cimg, carg3, carg4, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cimgAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonSetBehavior function as declared in nk/nuklear.h:3169
func NkButtonSetBehavior(arg0 *Context, arg1 C.enum_) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	C.nk_button_set_behavior(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkButtonPushBehavior function as declared in nk/nuklear.h:3170
func NkButtonPushBehavior(arg0 *Context, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_button_push_behavior(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkButtonPopBehavior function as declared in nk/nuklear.h:3171
func NkButtonPopBehavior(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_button_pop_behavior(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkCheckLabel function as declared in nk/nuklear.h:3177
func NkCheckLabel(arg0 *Context, arg1 *byte, active Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cactive, cactiveAllocMap := (C.nk_bool)(active), cgoAllocsUnknown
	__ret := C.nk_check_label(carg0, carg1, cactive)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkCheckText function as declared in nk/nuklear.h:3178
func NkCheckText(arg0 *Context, arg1 *byte, arg2 int32, active Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	cactive, cactiveAllocMap := (C.nk_bool)(active), cgoAllocsUnknown
	__ret := C.nk_check_text(carg0, carg1, carg2, cactive)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkCheckFlagsLabel function as declared in nk/nuklear.h:3179
func NkCheckFlagsLabel(arg0 *Context, arg1 *byte, flags uint32, value uint32) uint32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.uint)(flags), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.uint)(value), cgoAllocsUnknown
	__ret := C.nk_check_flags_label(carg0, carg1, cflags, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// NkCheckFlagsText function as declared in nk/nuklear.h:3180
func NkCheckFlagsText(arg0 *Context, arg1 *byte, arg2 int32, flags uint32, value uint32) uint32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.uint)(flags), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.uint)(value), cgoAllocsUnknown
	__ret := C.nk_check_flags_text(carg0, carg1, carg2, cflags, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (uint32)(__ret)
	return __v
}

// NkCheckboxLabel function as declared in nk/nuklear.h:3181
func NkCheckboxLabel(arg0 *Context, arg1 *byte, active *Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cactive, cactiveAllocMap := (*C.nk_bool)(unsafe.Pointer(active)), cgoAllocsUnknown
	__ret := C.nk_checkbox_label(carg0, carg1, cactive)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkCheckboxText function as declared in nk/nuklear.h:3182
func NkCheckboxText(arg0 *Context, arg1 *byte, arg2 int32, active *Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	cactive, cactiveAllocMap := (*C.nk_bool)(unsafe.Pointer(active)), cgoAllocsUnknown
	__ret := C.nk_checkbox_text(carg0, carg1, carg2, cactive)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkCheckboxFlagsLabel function as declared in nk/nuklear.h:3183
func NkCheckboxFlagsLabel(arg0 *Context, arg1 *byte, flags *uint32, value uint32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (*C.uint)(unsafe.Pointer(flags)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.uint)(value), cgoAllocsUnknown
	__ret := C.nk_checkbox_flags_label(carg0, carg1, cflags, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkCheckboxFlagsText function as declared in nk/nuklear.h:3184
func NkCheckboxFlagsText(arg0 *Context, arg1 *byte, arg2 int32, flags *uint32, value uint32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	cflags, cflagsAllocMap := (*C.uint)(unsafe.Pointer(flags)), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.uint)(value), cgoAllocsUnknown
	__ret := C.nk_checkbox_flags_text(carg0, carg1, carg2, cflags, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkRadioLabel function as declared in nk/nuklear.h:3190
func NkRadioLabel(arg0 *Context, arg1 *byte, active *Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cactive, cactiveAllocMap := (*C.nk_bool)(unsafe.Pointer(active)), cgoAllocsUnknown
	__ret := C.nk_radio_label(carg0, carg1, cactive)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkRadioText function as declared in nk/nuklear.h:3191
func NkRadioText(arg0 *Context, arg1 *byte, arg2 int32, active *Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	cactive, cactiveAllocMap := (*C.nk_bool)(unsafe.Pointer(active)), cgoAllocsUnknown
	__ret := C.nk_radio_text(carg0, carg1, carg2, cactive)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkOptionLabel function as declared in nk/nuklear.h:3192
func NkOptionLabel(arg0 *Context, arg1 *byte, active Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	cactive, cactiveAllocMap := (C.nk_bool)(active), cgoAllocsUnknown
	__ret := C.nk_option_label(carg0, carg1, cactive)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkOptionText function as declared in nk/nuklear.h:3193
func NkOptionText(arg0 *Context, arg1 *byte, arg2 int32, active Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	cactive, cactiveAllocMap := (C.nk_bool)(active), cgoAllocsUnknown
	__ret := C.nk_option_text(carg0, carg1, carg2, cactive)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectableLabel function as declared in nk/nuklear.h:3199
func NkSelectableLabel(arg0 *Context, arg1 *byte, align Flags, value *Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (*C.nk_bool)(unsafe.Pointer(value)), cgoAllocsUnknown
	__ret := C.nk_selectable_label(carg0, carg1, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectableText function as declared in nk/nuklear.h:3200
func NkSelectableText(arg0 *Context, arg1 *byte, arg2 int32, align Flags, value []Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := copyPBoolBytes((*sliceHeader)(unsafe.Pointer(&value)))
	__ret := C.nk_selectable_text(carg0, carg1, carg2, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectableImageLabel function as declared in nk/nuklear.h:3201
func NkSelectableImageLabel(arg0 *Context, arg1 Image, arg2 *byte, align Flags, value []Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := copyPBoolBytes((*sliceHeader)(unsafe.Pointer(&value)))
	__ret := C.nk_selectable_image_label(carg0, carg1, carg2, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectableImageText function as declared in nk/nuklear.h:3202
func NkSelectableImageText(arg0 *Context, arg1 Image, arg2 *byte, arg3 int32, align Flags, value []Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := copyPBoolBytes((*sliceHeader)(unsafe.Pointer(&value)))
	__ret := C.nk_selectable_image_text(carg0, carg1, carg2, carg3, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectableSymbolLabel function as declared in nk/nuklear.h:3203
func NkSelectableSymbolLabel(arg0 *Context, arg1 C.enum_, arg2 *byte, align Flags, value []Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := copyPBoolBytes((*sliceHeader)(unsafe.Pointer(&value)))
	__ret := C.nk_selectable_symbol_label(carg0, carg1, carg2, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectableSymbolText function as declared in nk/nuklear.h:3204
func NkSelectableSymbolText(arg0 *Context, arg1 C.enum_, arg2 *byte, arg3 int32, align Flags, value []Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := copyPBoolBytes((*sliceHeader)(unsafe.Pointer(&value)))
	__ret := C.nk_selectable_symbol_text(carg0, carg1, carg2, carg3, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectLabel function as declared in nk/nuklear.h:3206
func NkSelectLabel(arg0 *Context, arg1 *byte, align Flags, value Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.nk_bool)(value), cgoAllocsUnknown
	__ret := C.nk_select_label(carg0, carg1, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectText function as declared in nk/nuklear.h:3207
func NkSelectText(arg0 *Context, arg1 *byte, arg2 int32, align Flags, value Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.nk_bool)(value), cgoAllocsUnknown
	__ret := C.nk_select_text(carg0, carg1, carg2, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectImageLabel function as declared in nk/nuklear.h:3208
func NkSelectImageLabel(arg0 *Context, arg1 Image, arg2 *byte, align Flags, value Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.nk_bool)(value), cgoAllocsUnknown
	__ret := C.nk_select_image_label(carg0, carg1, carg2, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectImageText function as declared in nk/nuklear.h:3209
func NkSelectImageText(arg0 *Context, arg1 Image, arg2 *byte, arg3 int32, align Flags, value Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.nk_bool)(value), cgoAllocsUnknown
	__ret := C.nk_select_image_text(carg0, carg1, carg2, carg3, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectSymbolLabel function as declared in nk/nuklear.h:3210
func NkSelectSymbolLabel(arg0 *Context, arg1 C.enum_, arg2 *byte, align Flags, value Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.nk_bool)(value), cgoAllocsUnknown
	__ret := C.nk_select_symbol_label(carg0, carg1, carg2, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSelectSymbolText function as declared in nk/nuklear.h:3211
func NkSelectSymbolText(arg0 *Context, arg1 C.enum_, arg2 *byte, arg3 int32, align Flags, value Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	cvalue, cvalueAllocMap := (C.nk_bool)(value), cgoAllocsUnknown
	__ret := C.nk_select_symbol_text(carg0, carg1, carg2, carg3, calign, cvalue)
	runtime.KeepAlive(cvalueAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSlideFloat function as declared in nk/nuklear.h:3218
func NkSlideFloat(arg0 *Context, min float32, val float32, max float32, step float32) float32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cmin, cminAllocMap := (C.float)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (C.float)(val), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.float)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.float)(step), cgoAllocsUnknown
	__ret := C.nk_slide_float(carg0, cmin, cval, cmax, cstep)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// NkSlideInt function as declared in nk/nuklear.h:3219
func NkSlideInt(arg0 *Context, min int32, val int32, max int32, step int32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cmin, cminAllocMap := (C.int)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (C.int)(val), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.int)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.int)(step), cgoAllocsUnknown
	__ret := C.nk_slide_int(carg0, cmin, cval, cmax, cstep)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkSliderFloat function as declared in nk/nuklear.h:3220
func NkSliderFloat(arg0 *Context, min float32, val *float32, max float32, step float32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cmin, cminAllocMap := (C.float)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (*C.float)(unsafe.Pointer(val)), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.float)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.float)(step), cgoAllocsUnknown
	__ret := C.nk_slider_float(carg0, cmin, cval, cmax, cstep)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSliderInt function as declared in nk/nuklear.h:3221
func NkSliderInt(arg0 *Context, min int32, val *int32, max int32, step int32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cmin, cminAllocMap := (C.int)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (*C.int)(unsafe.Pointer(val)), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.int)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.int)(step), cgoAllocsUnknown
	__ret := C.nk_slider_int(carg0, cmin, cval, cmax, cstep)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkProgress function as declared in nk/nuklear.h:3227
func NkProgress(arg0 *Context, cur *Size, max Size, modifyable Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccur, ccurAllocMap := (*C.nk_size)(unsafe.Pointer(cur)), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.nk_size)(max), cgoAllocsUnknown
	cmodifyable, cmodifyableAllocMap := (C.nk_bool)(modifyable), cgoAllocsUnknown
	__ret := C.nk_progress(carg0, ccur, cmax, cmodifyable)
	runtime.KeepAlive(cmodifyableAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(ccurAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkProg function as declared in nk/nuklear.h:3228
func NkProg(arg0 *Context, cur Size, max Size, modifyable Bool) Size {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccur, ccurAllocMap := (C.nk_size)(cur), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.nk_size)(max), cgoAllocsUnknown
	cmodifyable, cmodifyableAllocMap := (C.nk_bool)(modifyable), cgoAllocsUnknown
	__ret := C.nk_prog(carg0, ccur, cmax, cmodifyable)
	runtime.KeepAlive(cmodifyableAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(ccurAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Size)(__ret)
	return __v
}

// NkColorPicker function as declared in nk/nuklear.h:3235
func NkColorPicker(arg0 *Context, arg1 Colorf, arg2 C.enum_) Colorf {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_colorf)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.enum_)(arg2), cgoAllocsUnknown
	__ret := C.nk_color_picker(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Colorf)(unsafe.Pointer(&__ret))
	return __v
}

// NkColorPick function as declared in nk/nuklear.h:3236
func NkColorPick(arg0 *Context, arg1 *Colorf, arg2 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_colorf)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.enum_)(arg2), cgoAllocsUnknown
	__ret := C.nk_color_pick(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkPropertyInt function as declared in nk/nuklear.h:3333
func NkPropertyInt(arg0 *Context, name string, min int32, val *int32, max int32, step int32, incPerPixel float32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	cmin, cminAllocMap := (C.int)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (*C.int)(unsafe.Pointer(val)), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.int)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.int)(step), cgoAllocsUnknown
	cincPerPixel, cincPerPixelAllocMap := (C.float)(incPerPixel), cgoAllocsUnknown
	C.nk_property_int(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	runtime.KeepAlive(cincPerPixelAllocMap)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPropertyFloat function as declared in nk/nuklear.h:3354
func NkPropertyFloat(arg0 *Context, name string, min float32, val *float32, max float32, step float32, incPerPixel float32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	cmin, cminAllocMap := (C.float)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (*C.float)(unsafe.Pointer(val)), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.float)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.float)(step), cgoAllocsUnknown
	cincPerPixel, cincPerPixelAllocMap := (C.float)(incPerPixel), cgoAllocsUnknown
	C.nk_property_float(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	runtime.KeepAlive(cincPerPixelAllocMap)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPropertyDouble function as declared in nk/nuklear.h:3375
func NkPropertyDouble(arg0 *Context, name string, min float64, val *float64, max float64, step float64, incPerPixel float32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	cmin, cminAllocMap := (C.double)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (*C.double)(unsafe.Pointer(val)), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.double)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.double)(step), cgoAllocsUnknown
	cincPerPixel, cincPerPixelAllocMap := (C.float)(incPerPixel), cgoAllocsUnknown
	C.nk_property_double(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	runtime.KeepAlive(cincPerPixelAllocMap)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPropertyi function as declared in nk/nuklear.h:3398
func NkPropertyi(arg0 *Context, name string, min int32, val int32, max int32, step int32, incPerPixel float32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	cmin, cminAllocMap := (C.int)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (C.int)(val), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.int)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.int)(step), cgoAllocsUnknown
	cincPerPixel, cincPerPixelAllocMap := (C.float)(incPerPixel), cgoAllocsUnknown
	__ret := C.nk_propertyi(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	runtime.KeepAlive(cincPerPixelAllocMap)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkPropertyf function as declared in nk/nuklear.h:3421
func NkPropertyf(arg0 *Context, name string, min float32, val float32, max float32, step float32, incPerPixel float32) float32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	cmin, cminAllocMap := (C.float)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (C.float)(val), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.float)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.float)(step), cgoAllocsUnknown
	cincPerPixel, cincPerPixelAllocMap := (C.float)(incPerPixel), cgoAllocsUnknown
	__ret := C.nk_propertyf(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	runtime.KeepAlive(cincPerPixelAllocMap)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (float32)(__ret)
	return __v
}

// NkPropertyd function as declared in nk/nuklear.h:3444
func NkPropertyd(arg0 *Context, name string, min float64, val float64, max float64, step float64, incPerPixel float32) float64 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	name = safeString(name)
	cname, cnameAllocMap := unpackPCharString(name)
	cmin, cminAllocMap := (C.double)(min), cgoAllocsUnknown
	cval, cvalAllocMap := (C.double)(val), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.double)(max), cgoAllocsUnknown
	cstep, cstepAllocMap := (C.double)(step), cgoAllocsUnknown
	cincPerPixel, cincPerPixelAllocMap := (C.float)(incPerPixel), cgoAllocsUnknown
	__ret := C.nk_propertyd(carg0, cname, cmin, cval, cmax, cstep, cincPerPixel)
	runtime.KeepAlive(cincPerPixelAllocMap)
	runtime.KeepAlive(cstepAllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cvalAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(name)
	runtime.KeepAlive(cnameAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (float64)(__ret)
	return __v
}

// NkEditString function as declared in nk/nuklear.h:3478
func NkEditString(arg0 *Context, arg1 Flags, buffer []byte, len *int32, max int32, arg5 PluginFilter) Flags {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.nk_flags)(arg1), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&buffer)))
	clen, clenAllocMap := (*C.int)(unsafe.Pointer(len)), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.int)(max), cgoAllocsUnknown
	carg5, carg5AllocMap := arg5.PassValue()
	__ret := C.nk_edit_string(carg0, carg1, cbuffer, clen, cmax, carg5)
	runtime.KeepAlive(carg5AllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Flags)(__ret)
	return __v
}

// NkEditStringZeroTerminated function as declared in nk/nuklear.h:3479
func NkEditStringZeroTerminated(arg0 *Context, arg1 Flags, buffer []byte, max int32, arg4 PluginFilter) Flags {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.nk_flags)(arg1), cgoAllocsUnknown
	cbuffer, cbufferAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&buffer)))
	cmax, cmaxAllocMap := (C.int)(max), cgoAllocsUnknown
	carg4, carg4AllocMap := arg4.PassValue()
	__ret := C.nk_edit_string_zero_terminated(carg0, carg1, cbuffer, cmax, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cbufferAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Flags)(__ret)
	return __v
}

// NkEditBuffer function as declared in nk/nuklear.h:3480
func NkEditBuffer(arg0 *Context, arg1 Flags, arg2 *TextEdit, arg3 PluginFilter) Flags {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.nk_flags)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := arg3.PassValue()
	__ret := C.nk_edit_buffer(carg0, carg1, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Flags)(__ret)
	return __v
}

// NkEditFocus function as declared in nk/nuklear.h:3481
func NkEditFocus(arg0 *Context, flags Flags) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cflags, cflagsAllocMap := (C.nk_flags)(flags), cgoAllocsUnknown
	C.nk_edit_focus(carg0, cflags)
	runtime.KeepAlive(cflagsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkEditUnfocus function as declared in nk/nuklear.h:3482
func NkEditUnfocus(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_edit_unfocus(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkChartBegin function as declared in nk/nuklear.h:3488
func NkChartBegin(arg0 *Context, arg1 C.enum_, num int32, min float32, max float32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	cnum, cnumAllocMap := (C.int)(num), cgoAllocsUnknown
	cmin, cminAllocMap := (C.float)(min), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.float)(max), cgoAllocsUnknown
	__ret := C.nk_chart_begin(carg0, carg1, cnum, cmin, cmax)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(cnumAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkChartBeginColored function as declared in nk/nuklear.h:3489
func NkChartBeginColored(arg0 *Context, arg1 C.enum_, arg2 Color, active Color, num int32, min float32, max float32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	cactive, cactiveAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&active)), cgoAllocsUnknown
	cnum, cnumAllocMap := (C.int)(num), cgoAllocsUnknown
	cmin, cminAllocMap := (C.float)(min), cgoAllocsUnknown
	cmax, cmaxAllocMap := (C.float)(max), cgoAllocsUnknown
	__ret := C.nk_chart_begin_colored(carg0, carg1, carg2, cactive, cnum, cmin, cmax)
	runtime.KeepAlive(cmaxAllocMap)
	runtime.KeepAlive(cminAllocMap)
	runtime.KeepAlive(cnumAllocMap)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkChartAddSlot function as declared in nk/nuklear.h:3490
func NkChartAddSlot(ctx *Context, arg1 C.enum_, count int32, minValue float32, maxValue float32) {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	cminValue, cminValueAllocMap := (C.float)(minValue), cgoAllocsUnknown
	cmaxValue, cmaxValueAllocMap := (C.float)(maxValue), cgoAllocsUnknown
	C.nk_chart_add_slot(cctx, carg1, ccount, cminValue, cmaxValue)
	runtime.KeepAlive(cmaxValueAllocMap)
	runtime.KeepAlive(cminValueAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// NkChartAddSlotColored function as declared in nk/nuklear.h:3491
func NkChartAddSlotColored(ctx *Context, arg1 C.enum_, arg2 Color, active Color, count int32, minValue float32, maxValue float32) {
	cctx, cctxAllocMap := (*C.struct_nk_context)(unsafe.Pointer(ctx)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	cactive, cactiveAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&active)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	cminValue, cminValueAllocMap := (C.float)(minValue), cgoAllocsUnknown
	cmaxValue, cmaxValueAllocMap := (C.float)(maxValue), cgoAllocsUnknown
	C.nk_chart_add_slot_colored(cctx, carg1, carg2, cactive, ccount, cminValue, cmaxValue)
	runtime.KeepAlive(cmaxValueAllocMap)
	runtime.KeepAlive(cminValueAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cactiveAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(cctxAllocMap)
}

// NkChartPush function as declared in nk/nuklear.h:3492
func NkChartPush(arg0 *Context, arg1 float32) Flags {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.float)(arg1), cgoAllocsUnknown
	__ret := C.nk_chart_push(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Flags)(__ret)
	return __v
}

// NkChartPushSlot function as declared in nk/nuklear.h:3493
func NkChartPushSlot(arg0 *Context, arg1 float32, arg2 int32) Flags {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.float)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	__ret := C.nk_chart_push_slot(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Flags)(__ret)
	return __v
}

// NkChartEnd function as declared in nk/nuklear.h:3494
func NkChartEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_chart_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPlot function as declared in nk/nuklear.h:3495
func NkPlot(arg0 *Context, arg1 C.enum_, values *float32, count int32, offset int32) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	cvalues, cvaluesAllocMap := (*C.float)(unsafe.Pointer(values)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	coffset, coffsetAllocMap := (C.int)(offset), cgoAllocsUnknown
	C.nk_plot(carg0, carg1, cvalues, ccount, coffset)
	runtime.KeepAlive(coffsetAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cvaluesAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPopupBegin function as declared in nk/nuklear.h:3502
func NkPopupBegin(arg0 *Context, arg1 C.enum_, arg2 *byte, arg3 Flags, bounds Rect) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.nk_flags)(arg3), cgoAllocsUnknown
	cbounds, cboundsAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&bounds)), cgoAllocsUnknown
	__ret := C.nk_popup_begin(carg0, carg1, carg2, carg3, cbounds)
	runtime.KeepAlive(cboundsAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkPopupClose function as declared in nk/nuklear.h:3503
func NkPopupClose(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_popup_close(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPopupEnd function as declared in nk/nuklear.h:3504
func NkPopupEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_popup_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPopupGetScroll function as declared in nk/nuklear.h:3505
func NkPopupGetScroll(arg0 *Context, offsetX *Uint, offsetY *Uint) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	coffsetX, coffsetXAllocMap := (*C.nk_uint)(unsafe.Pointer(offsetX)), cgoAllocsUnknown
	coffsetY, coffsetYAllocMap := (*C.nk_uint)(unsafe.Pointer(offsetY)), cgoAllocsUnknown
	C.nk_popup_get_scroll(carg0, coffsetX, coffsetY)
	runtime.KeepAlive(coffsetYAllocMap)
	runtime.KeepAlive(coffsetXAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPopupSetScroll function as declared in nk/nuklear.h:3506
func NkPopupSetScroll(arg0 *Context, offsetX Uint, offsetY Uint) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	coffsetX, coffsetXAllocMap := (C.nk_uint)(offsetX), cgoAllocsUnknown
	coffsetY, coffsetYAllocMap := (C.nk_uint)(offsetY), cgoAllocsUnknown
	C.nk_popup_set_scroll(carg0, coffsetX, coffsetY)
	runtime.KeepAlive(coffsetYAllocMap)
	runtime.KeepAlive(coffsetXAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkCombo function as declared in nk/nuklear.h:3512
func NkCombo(arg0 *Context, items []string, count int32, selected int32, itemHeight int32, size Vec2) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	citems, citemsAllocMap := unpackArgSString(items)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	cselected, cselectedAllocMap := (C.int)(selected), cgoAllocsUnknown
	citemHeight, citemHeightAllocMap := (C.int)(itemHeight), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo(carg0, citems, ccount, cselected, citemHeight, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(citemHeightAllocMap)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	packSString(items, citems)
	runtime.KeepAlive(citemsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkComboSeparator function as declared in nk/nuklear.h:3513
func NkComboSeparator(arg0 *Context, itemsSeparatedBySeparator string, separator int32, selected int32, count int32, itemHeight int32, size Vec2) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	itemsSeparatedBySeparator = safeString(itemsSeparatedBySeparator)
	citemsSeparatedBySeparator, citemsSeparatedBySeparatorAllocMap := unpackPCharString(itemsSeparatedBySeparator)
	cseparator, cseparatorAllocMap := (C.int)(separator), cgoAllocsUnknown
	cselected, cselectedAllocMap := (C.int)(selected), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	citemHeight, citemHeightAllocMap := (C.int)(itemHeight), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_separator(carg0, citemsSeparatedBySeparator, cseparator, cselected, ccount, citemHeight, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(citemHeightAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(cseparatorAllocMap)
	runtime.KeepAlive(itemsSeparatedBySeparator)
	runtime.KeepAlive(citemsSeparatedBySeparatorAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkComboString function as declared in nk/nuklear.h:3514
func NkComboString(arg0 *Context, itemsSeparatedByZeros string, selected int32, count int32, itemHeight int32, size Vec2) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	itemsSeparatedByZeros = safeString(itemsSeparatedByZeros)
	citemsSeparatedByZeros, citemsSeparatedByZerosAllocMap := unpackPCharString(itemsSeparatedByZeros)
	cselected, cselectedAllocMap := (C.int)(selected), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	citemHeight, citemHeightAllocMap := (C.int)(itemHeight), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_string(carg0, citemsSeparatedByZeros, cselected, ccount, citemHeight, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(citemHeightAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(itemsSeparatedByZeros)
	runtime.KeepAlive(citemsSeparatedByZerosAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkCombobox function as declared in nk/nuklear.h:3516
func NkCombobox(arg0 *Context, items []string, count int32, selected *int32, itemHeight int32, size Vec2) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	citems, citemsAllocMap := unpackArgSString(items)
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	cselected, cselectedAllocMap := (*C.int)(unsafe.Pointer(selected)), cgoAllocsUnknown
	citemHeight, citemHeightAllocMap := (C.int)(itemHeight), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	C.nk_combobox(carg0, citems, ccount, cselected, citemHeight, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(citemHeightAllocMap)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	packSString(items, citems)
	runtime.KeepAlive(citemsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkComboboxString function as declared in nk/nuklear.h:3517
func NkComboboxString(arg0 *Context, itemsSeparatedByZeros string, selected *int32, count int32, itemHeight int32, size Vec2) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	itemsSeparatedByZeros = safeString(itemsSeparatedByZeros)
	citemsSeparatedByZeros, citemsSeparatedByZerosAllocMap := unpackPCharString(itemsSeparatedByZeros)
	cselected, cselectedAllocMap := (*C.int)(unsafe.Pointer(selected)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	citemHeight, citemHeightAllocMap := (C.int)(itemHeight), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	C.nk_combobox_string(carg0, citemsSeparatedByZeros, cselected, ccount, citemHeight, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(citemHeightAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(itemsSeparatedByZeros)
	runtime.KeepAlive(citemsSeparatedByZerosAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkComboboxSeparator function as declared in nk/nuklear.h:3518
func NkComboboxSeparator(arg0 *Context, itemsSeparatedBySeparator string, separator int32, selected *int32, count int32, itemHeight int32, size Vec2) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	itemsSeparatedBySeparator = safeString(itemsSeparatedBySeparator)
	citemsSeparatedBySeparator, citemsSeparatedBySeparatorAllocMap := unpackPCharString(itemsSeparatedBySeparator)
	cseparator, cseparatorAllocMap := (C.int)(separator), cgoAllocsUnknown
	cselected, cselectedAllocMap := (*C.int)(unsafe.Pointer(selected)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.int)(count), cgoAllocsUnknown
	citemHeight, citemHeightAllocMap := (C.int)(itemHeight), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	C.nk_combobox_separator(carg0, citemsSeparatedBySeparator, cseparator, cselected, ccount, citemHeight, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(citemHeightAllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(cseparatorAllocMap)
	runtime.KeepAlive(itemsSeparatedBySeparator)
	runtime.KeepAlive(citemsSeparatedBySeparatorAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkComboBeginText function as declared in nk/nuklear.h:3525
func NkComboBeginText(arg0 *Context, selected string, arg2 int32, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	selected = safeString(selected)
	cselected, cselectedAllocMap := unpackPCharString(selected)
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_begin_text(carg0, cselected, carg2, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(selected)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboBeginLabel function as declared in nk/nuklear.h:3526
func NkComboBeginLabel(arg0 *Context, selected string, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	selected = safeString(selected)
	cselected, cselectedAllocMap := unpackPCharString(selected)
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_begin_label(carg0, cselected, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(selected)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboBeginColor function as declared in nk/nuklear.h:3527
func NkComboBeginColor(arg0 *Context, color Color, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccolor, ccolorAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&color)), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_begin_color(carg0, ccolor, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(ccolorAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboBeginSymbol function as declared in nk/nuklear.h:3528
func NkComboBeginSymbol(arg0 *Context, arg1 C.enum_, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_begin_symbol(carg0, carg1, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboBeginSymbolLabel function as declared in nk/nuklear.h:3529
func NkComboBeginSymbolLabel(arg0 *Context, selected string, arg2 C.enum_, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	selected = safeString(selected)
	cselected, cselectedAllocMap := unpackPCharString(selected)
	carg2, carg2AllocMap := (C.enum_)(arg2), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_begin_symbol_label(carg0, cselected, carg2, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(selected)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboBeginSymbolText function as declared in nk/nuklear.h:3530
func NkComboBeginSymbolText(arg0 *Context, selected string, arg2 int32, arg3 C.enum_, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	selected = safeString(selected)
	cselected, cselectedAllocMap := unpackPCharString(selected)
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.enum_)(arg3), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_begin_symbol_text(carg0, cselected, carg2, carg3, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(selected)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboBeginImage function as declared in nk/nuklear.h:3531
func NkComboBeginImage(arg0 *Context, img Image, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cimg, cimgAllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&img)), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_begin_image(carg0, cimg, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cimgAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboBeginImageLabel function as declared in nk/nuklear.h:3532
func NkComboBeginImageLabel(arg0 *Context, selected string, arg2 Image, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	selected = safeString(selected)
	cselected, cselectedAllocMap := unpackPCharString(selected)
	carg2, carg2AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_begin_image_label(carg0, cselected, carg2, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(selected)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboBeginImageText function as declared in nk/nuklear.h:3533
func NkComboBeginImageText(arg0 *Context, selected string, arg2 int32, arg3 Image, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	selected = safeString(selected)
	cselected, cselectedAllocMap := unpackPCharString(selected)
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_combo_begin_image_text(carg0, cselected, carg2, carg3, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(selected)
	runtime.KeepAlive(cselectedAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboItemLabel function as declared in nk/nuklear.h:3534
func NkComboItemLabel(arg0 *Context, arg1 *byte, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_label(carg0, carg1, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboItemText function as declared in nk/nuklear.h:3535
func NkComboItemText(arg0 *Context, arg1 *byte, arg2 int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_text(carg0, carg1, carg2, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboItemImageLabel function as declared in nk/nuklear.h:3536
func NkComboItemImageLabel(arg0 *Context, arg1 Image, arg2 *byte, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_image_label(carg0, carg1, carg2, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboItemImageText function as declared in nk/nuklear.h:3537
func NkComboItemImageText(arg0 *Context, arg1 Image, arg2 *byte, arg3 int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_image_text(carg0, carg1, carg2, carg3, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboItemSymbolLabel function as declared in nk/nuklear.h:3538
func NkComboItemSymbolLabel(arg0 *Context, arg1 C.enum_, arg2 *byte, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_symbol_label(carg0, carg1, carg2, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboItemSymbolText function as declared in nk/nuklear.h:3539
func NkComboItemSymbolText(arg0 *Context, arg1 C.enum_, arg2 *byte, arg3 int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_combo_item_symbol_text(carg0, carg1, carg2, carg3, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkComboClose function as declared in nk/nuklear.h:3540
func NkComboClose(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_combo_close(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkComboEnd function as declared in nk/nuklear.h:3541
func NkComboEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_combo_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkContextualBegin function as declared in nk/nuklear.h:3547
func NkContextualBegin(arg0 *Context, arg1 Flags, arg2 Vec2, triggerBounds Rect) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.nk_flags)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	ctriggerBounds, ctriggerBoundsAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&triggerBounds)), cgoAllocsUnknown
	__ret := C.nk_contextual_begin(carg0, carg1, carg2, ctriggerBounds)
	runtime.KeepAlive(ctriggerBoundsAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkContextualItemText function as declared in nk/nuklear.h:3548
func NkContextualItemText(arg0 *Context, arg1 *byte, arg2 int32, align Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	__ret := C.nk_contextual_item_text(carg0, carg1, carg2, calign)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkContextualItemLabel function as declared in nk/nuklear.h:3549
func NkContextualItemLabel(arg0 *Context, arg1 *byte, align Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	__ret := C.nk_contextual_item_label(carg0, carg1, calign)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkContextualItemImageLabel function as declared in nk/nuklear.h:3550
func NkContextualItemImageLabel(arg0 *Context, arg1 Image, arg2 *byte, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_contextual_item_image_label(carg0, carg1, carg2, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkContextualItemImageText function as declared in nk/nuklear.h:3551
func NkContextualItemImageText(arg0 *Context, arg1 Image, arg2 *byte, len int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_contextual_item_image_text(carg0, carg1, carg2, clen, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkContextualItemSymbolLabel function as declared in nk/nuklear.h:3552
func NkContextualItemSymbolLabel(arg0 *Context, arg1 C.enum_, arg2 *byte, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_contextual_item_symbol_label(carg0, carg1, carg2, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkContextualItemSymbolText function as declared in nk/nuklear.h:3553
func NkContextualItemSymbolText(arg0 *Context, arg1 C.enum_, arg2 *byte, arg3 int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_contextual_item_symbol_text(carg0, carg1, carg2, carg3, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkContextualClose function as declared in nk/nuklear.h:3554
func NkContextualClose(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_contextual_close(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkContextualEnd function as declared in nk/nuklear.h:3555
func NkContextualEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_contextual_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTooltip function as declared in nk/nuklear.h:3561
func NkTooltip(arg0 *Context, arg1 *byte) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.nk_tooltip(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTooltipBegin function as declared in nk/nuklear.h:3566
func NkTooltipBegin(arg0 *Context, width float32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (C.float)(width), cgoAllocsUnknown
	__ret := C.nk_tooltip_begin(carg0, cwidth)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTooltipEnd function as declared in nk/nuklear.h:3567
func NkTooltipEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_tooltip_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkMenubarBegin function as declared in nk/nuklear.h:3573
func NkMenubarBegin(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_menubar_begin(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkMenubarEnd function as declared in nk/nuklear.h:3574
func NkMenubarEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_menubar_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkMenuBeginText function as declared in nk/nuklear.h:3575
func NkMenuBeginText(arg0 *Context, title string, titleLen int32, align Flags, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	title = safeString(title)
	ctitle, ctitleAllocMap := unpackPCharString(title)
	ctitleLen, ctitleLenAllocMap := (C.int)(titleLen), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_menu_begin_text(carg0, ctitle, ctitleLen, calign, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(ctitleLenAllocMap)
	runtime.KeepAlive(title)
	runtime.KeepAlive(ctitleAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuBeginLabel function as declared in nk/nuklear.h:3576
func NkMenuBeginLabel(arg0 *Context, arg1 *byte, align Flags, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_menu_begin_label(carg0, carg1, calign, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuBeginImage function as declared in nk/nuklear.h:3577
func NkMenuBeginImage(arg0 *Context, arg1 *byte, arg2 Image, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_menu_begin_image(carg0, carg1, carg2, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuBeginImageText function as declared in nk/nuklear.h:3578
func NkMenuBeginImageText(arg0 *Context, arg1 *byte, arg2 int32, align Flags, arg4 Image, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_menu_begin_image_text(carg0, carg1, carg2, calign, carg4, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuBeginImageLabel function as declared in nk/nuklear.h:3579
func NkMenuBeginImageLabel(arg0 *Context, arg1 *byte, align Flags, arg3 Image, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_menu_begin_image_label(carg0, carg1, calign, carg3, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuBeginSymbol function as declared in nk/nuklear.h:3580
func NkMenuBeginSymbol(arg0 *Context, arg1 *byte, arg2 C.enum_, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.enum_)(arg2), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_menu_begin_symbol(carg0, carg1, carg2, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuBeginSymbolText function as declared in nk/nuklear.h:3581
func NkMenuBeginSymbolText(arg0 *Context, arg1 *byte, arg2 int32, align Flags, arg4 C.enum_, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	carg4, carg4AllocMap := (C.enum_)(arg4), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_menu_begin_symbol_text(carg0, carg1, carg2, calign, carg4, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuBeginSymbolLabel function as declared in nk/nuklear.h:3582
func NkMenuBeginSymbolLabel(arg0 *Context, arg1 *byte, align Flags, arg3 C.enum_, size Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.enum_)(arg3), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_menu_begin_symbol_label(carg0, carg1, calign, carg3, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuItemText function as declared in nk/nuklear.h:3583
func NkMenuItemText(arg0 *Context, arg1 *byte, arg2 int32, align Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_flags)(align), cgoAllocsUnknown
	__ret := C.nk_menu_item_text(carg0, carg1, carg2, calign)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuItemLabel function as declared in nk/nuklear.h:3584
func NkMenuItemLabel(arg0 *Context, arg1 *byte, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_label(carg0, carg1, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuItemImageLabel function as declared in nk/nuklear.h:3585
func NkMenuItemImageLabel(arg0 *Context, arg1 Image, arg2 *byte, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_image_label(carg0, carg1, carg2, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuItemImageText function as declared in nk/nuklear.h:3586
func NkMenuItemImageText(arg0 *Context, arg1 Image, arg2 *byte, len int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_image_text(carg0, carg1, carg2, clen, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuItemSymbolText function as declared in nk/nuklear.h:3587
func NkMenuItemSymbolText(arg0 *Context, arg1 C.enum_, arg2 *byte, arg3 int32, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_symbol_text(carg0, carg1, carg2, carg3, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuItemSymbolLabel function as declared in nk/nuklear.h:3588
func NkMenuItemSymbolLabel(arg0 *Context, arg1 C.enum_, arg2 *byte, alignment Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	calignment, calignmentAllocMap := (C.nk_flags)(alignment), cgoAllocsUnknown
	__ret := C.nk_menu_item_symbol_label(carg0, carg1, carg2, calignment)
	runtime.KeepAlive(calignmentAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkMenuClose function as declared in nk/nuklear.h:3589
func NkMenuClose(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_menu_close(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkMenuEnd function as declared in nk/nuklear.h:3590
func NkMenuEnd(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_menu_end(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStyleDefault function as declared in nk/nuklear.h:3637
func NkStyleDefault(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_style_default(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStyleFromTable function as declared in nk/nuklear.h:3638
func NkStyleFromTable(arg0 *Context, arg1 []Color) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := copyPStructNkColorBytes((*sliceHeader)(unsafe.Pointer(&arg1)))
	C.nk_style_from_table(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStyleLoadCursor function as declared in nk/nuklear.h:3639
func NkStyleLoadCursor(arg0 *Context, arg1 C.enum_, arg2 *Cursor) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.struct_nk_cursor)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	C.nk_style_load_cursor(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStyleLoadAllCursors function as declared in nk/nuklear.h:3640
func NkStyleLoadAllCursors(arg0 *Context, arg1 *Cursor) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_cursor)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.nk_style_load_all_cursors(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStyleGetColorByName function as declared in nk/nuklear.h:3641
func NkStyleGetColorByName(arg0 C.enum_) string {
	carg0, carg0AllocMap := (C.enum_)(arg0), cgoAllocsUnknown
	__ret := C.nk_style_get_color_by_name(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := packPCharString(__ret)
	return __v
}

// NkStyleSetFont function as declared in nk/nuklear.h:3642
func NkStyleSetFont(arg0 *Context, arg1 *UserFont) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := arg1.PassRef()
	C.nk_style_set_font(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStyleSetCursor function as declared in nk/nuklear.h:3643
func NkStyleSetCursor(arg0 *Context, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_style_set_cursor(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStyleShowCursor function as declared in nk/nuklear.h:3644
func NkStyleShowCursor(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_style_show_cursor(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStyleHideCursor function as declared in nk/nuklear.h:3645
func NkStyleHideCursor(arg0 *Context) {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_style_hide_cursor(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStylePushFont function as declared in nk/nuklear.h:3647
func NkStylePushFont(arg0 *Context, arg1 *UserFont) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := arg1.PassRef()
	__ret := C.nk_style_push_font(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePushFloat function as declared in nk/nuklear.h:3648
func NkStylePushFloat(arg0 *Context, arg1 *float32, arg2 float32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.float)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.float)(arg2), cgoAllocsUnknown
	__ret := C.nk_style_push_float(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePushVec2 function as declared in nk/nuklear.h:3649
func NkStylePushVec2(arg0 *Context, arg1 *Vec2, arg2 Vec2) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_vec2)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	__ret := C.nk_style_push_vec2(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePushStyleItem function as declared in nk/nuklear.h:3650
func NkStylePushStyleItem(arg0 *Context, arg1 *StyleItem, arg2 StyleItem) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_style_item)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_style_item)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	__ret := C.nk_style_push_style_item(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePushFlags function as declared in nk/nuklear.h:3651
func NkStylePushFlags(arg0 *Context, arg1 *Flags, arg2 Flags) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.nk_flags)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.nk_flags)(arg2), cgoAllocsUnknown
	__ret := C.nk_style_push_flags(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePushColor function as declared in nk/nuklear.h:3652
func NkStylePushColor(arg0 *Context, arg1 *Color, arg2 Color) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_color)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	__ret := C.nk_style_push_color(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePopFont function as declared in nk/nuklear.h:3654
func NkStylePopFont(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_style_pop_font(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePopFloat function as declared in nk/nuklear.h:3655
func NkStylePopFloat(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_style_pop_float(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePopVec2 function as declared in nk/nuklear.h:3656
func NkStylePopVec2(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_style_pop_vec2(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePopStyleItem function as declared in nk/nuklear.h:3657
func NkStylePopStyleItem(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_style_pop_style_item(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePopFlags function as declared in nk/nuklear.h:3658
func NkStylePopFlags(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_style_pop_flags(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkStylePopColor function as declared in nk/nuklear.h:3659
func NkStylePopColor(arg0 *Context) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_context)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_style_pop_color(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkRgb function as declared in nk/nuklear.h:3665
func NkRgb(r int32, g int32, b int32) Color {
	cr, crAllocMap := (C.int)(r), cgoAllocsUnknown
	cg, cgAllocMap := (C.int)(g), cgoAllocsUnknown
	cb, cbAllocMap := (C.int)(b), cgoAllocsUnknown
	__ret := C.nk_rgb(cr, cg, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(cgAllocMap)
	runtime.KeepAlive(crAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbIv function as declared in nk/nuklear.h:3666
func NkRgbIv(rgb *int32) Color {
	crgb, crgbAllocMap := (*C.int)(unsafe.Pointer(rgb)), cgoAllocsUnknown
	__ret := C.nk_rgb_iv(crgb)
	runtime.KeepAlive(crgbAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbBv function as declared in nk/nuklear.h:3667
func NkRgbBv(rgb *byte) Color {
	crgb, crgbAllocMap := (*C.nk_byte)(unsafe.Pointer(rgb)), cgoAllocsUnknown
	__ret := C.nk_rgb_bv(crgb)
	runtime.KeepAlive(crgbAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbF function as declared in nk/nuklear.h:3668
func NkRgbF(r float32, g float32, b float32) Color {
	cr, crAllocMap := (C.float)(r), cgoAllocsUnknown
	cg, cgAllocMap := (C.float)(g), cgoAllocsUnknown
	cb, cbAllocMap := (C.float)(b), cgoAllocsUnknown
	__ret := C.nk_rgb_f(cr, cg, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(cgAllocMap)
	runtime.KeepAlive(crAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbFv function as declared in nk/nuklear.h:3669
func NkRgbFv(rgb *float32) Color {
	crgb, crgbAllocMap := (*C.float)(unsafe.Pointer(rgb)), cgoAllocsUnknown
	__ret := C.nk_rgb_fv(crgb)
	runtime.KeepAlive(crgbAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbCf function as declared in nk/nuklear.h:3670
func NkRgbCf(c Colorf) Color {
	cc, ccAllocMap := *(*C.struct_nk_colorf)(unsafe.Pointer(&c)), cgoAllocsUnknown
	__ret := C.nk_rgb_cf(cc)
	runtime.KeepAlive(ccAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbHex function as declared in nk/nuklear.h:3671
func NkRgbHex(rgb string) Color {
	rgb = safeString(rgb)
	crgb, crgbAllocMap := unpackPCharString(rgb)
	__ret := C.nk_rgb_hex(crgb)
	runtime.KeepAlive(rgb)
	runtime.KeepAlive(crgbAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgba function as declared in nk/nuklear.h:3673
func NkRgba(r int32, g int32, b int32, a int32) Color {
	cr, crAllocMap := (C.int)(r), cgoAllocsUnknown
	cg, cgAllocMap := (C.int)(g), cgoAllocsUnknown
	cb, cbAllocMap := (C.int)(b), cgoAllocsUnknown
	ca, caAllocMap := (C.int)(a), cgoAllocsUnknown
	__ret := C.nk_rgba(cr, cg, cb, ca)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(cgAllocMap)
	runtime.KeepAlive(crAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaU32 function as declared in nk/nuklear.h:3674
func NkRgbaU32(arg0 Uint) Color {
	carg0, carg0AllocMap := (C.nk_uint)(arg0), cgoAllocsUnknown
	__ret := C.nk_rgba_u32(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaIv function as declared in nk/nuklear.h:3675
func NkRgbaIv(rgba *int32) Color {
	crgba, crgbaAllocMap := (*C.int)(unsafe.Pointer(rgba)), cgoAllocsUnknown
	__ret := C.nk_rgba_iv(crgba)
	runtime.KeepAlive(crgbaAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaBv function as declared in nk/nuklear.h:3676
func NkRgbaBv(rgba *byte) Color {
	crgba, crgbaAllocMap := (*C.nk_byte)(unsafe.Pointer(rgba)), cgoAllocsUnknown
	__ret := C.nk_rgba_bv(crgba)
	runtime.KeepAlive(crgbaAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaF function as declared in nk/nuklear.h:3677
func NkRgbaF(r float32, g float32, b float32, a float32) Color {
	cr, crAllocMap := (C.float)(r), cgoAllocsUnknown
	cg, cgAllocMap := (C.float)(g), cgoAllocsUnknown
	cb, cbAllocMap := (C.float)(b), cgoAllocsUnknown
	ca, caAllocMap := (C.float)(a), cgoAllocsUnknown
	__ret := C.nk_rgba_f(cr, cg, cb, ca)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(cgAllocMap)
	runtime.KeepAlive(crAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaFv function as declared in nk/nuklear.h:3678
func NkRgbaFv(rgba *float32) Color {
	crgba, crgbaAllocMap := (*C.float)(unsafe.Pointer(rgba)), cgoAllocsUnknown
	__ret := C.nk_rgba_fv(crgba)
	runtime.KeepAlive(crgbaAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaCf function as declared in nk/nuklear.h:3679
func NkRgbaCf(c Colorf) Color {
	cc, ccAllocMap := *(*C.struct_nk_colorf)(unsafe.Pointer(&c)), cgoAllocsUnknown
	__ret := C.nk_rgba_cf(cc)
	runtime.KeepAlive(ccAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkRgbaHex function as declared in nk/nuklear.h:3680
func NkRgbaHex(rgb string) Color {
	rgb = safeString(rgb)
	crgb, crgbAllocMap := unpackPCharString(rgb)
	__ret := C.nk_rgba_hex(crgb)
	runtime.KeepAlive(rgb)
	runtime.KeepAlive(crgbAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvaColorf function as declared in nk/nuklear.h:3682
func NkHsvaColorf(h float32, s float32, v float32, a float32) Colorf {
	ch, chAllocMap := (C.float)(h), cgoAllocsUnknown
	cs, csAllocMap := (C.float)(s), cgoAllocsUnknown
	cv, cvAllocMap := (C.float)(v), cgoAllocsUnknown
	ca, caAllocMap := (C.float)(a), cgoAllocsUnknown
	__ret := C.nk_hsva_colorf(ch, cs, cv, ca)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cvAllocMap)
	runtime.KeepAlive(csAllocMap)
	runtime.KeepAlive(chAllocMap)
	__v := *(*Colorf)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvaColorfv function as declared in nk/nuklear.h:3683
func NkHsvaColorfv(c *float32) Colorf {
	cc, ccAllocMap := (*C.float)(unsafe.Pointer(c)), cgoAllocsUnknown
	__ret := C.nk_hsva_colorfv(cc)
	runtime.KeepAlive(ccAllocMap)
	__v := *(*Colorf)(unsafe.Pointer(&__ret))
	return __v
}

// NkColorfHsvaF function as declared in nk/nuklear.h:3684
func NkColorfHsvaF(outH *float32, outS *float32, outV *float32, outA *float32, in Colorf) {
	coutH, coutHAllocMap := (*C.float)(unsafe.Pointer(outH)), cgoAllocsUnknown
	coutS, coutSAllocMap := (*C.float)(unsafe.Pointer(outS)), cgoAllocsUnknown
	coutV, coutVAllocMap := (*C.float)(unsafe.Pointer(outV)), cgoAllocsUnknown
	coutA, coutAAllocMap := (*C.float)(unsafe.Pointer(outA)), cgoAllocsUnknown
	cin, cinAllocMap := *(*C.struct_nk_colorf)(unsafe.Pointer(&in)), cgoAllocsUnknown
	C.nk_colorf_hsva_f(coutH, coutS, coutV, coutA, cin)
	runtime.KeepAlive(cinAllocMap)
	runtime.KeepAlive(coutAAllocMap)
	runtime.KeepAlive(coutVAllocMap)
	runtime.KeepAlive(coutSAllocMap)
	runtime.KeepAlive(coutHAllocMap)
}

// NkColorfHsvaFv function as declared in nk/nuklear.h:3685
func NkColorfHsvaFv(hsva *float32, in Colorf) {
	chsva, chsvaAllocMap := (*C.float)(unsafe.Pointer(hsva)), cgoAllocsUnknown
	cin, cinAllocMap := *(*C.struct_nk_colorf)(unsafe.Pointer(&in)), cgoAllocsUnknown
	C.nk_colorf_hsva_fv(chsva, cin)
	runtime.KeepAlive(cinAllocMap)
	runtime.KeepAlive(chsvaAllocMap)
}

// NkHsv function as declared in nk/nuklear.h:3687
func NkHsv(h int32, s int32, v int32) Color {
	ch, chAllocMap := (C.int)(h), cgoAllocsUnknown
	cs, csAllocMap := (C.int)(s), cgoAllocsUnknown
	cv, cvAllocMap := (C.int)(v), cgoAllocsUnknown
	__ret := C.nk_hsv(ch, cs, cv)
	runtime.KeepAlive(cvAllocMap)
	runtime.KeepAlive(csAllocMap)
	runtime.KeepAlive(chAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvIv function as declared in nk/nuklear.h:3688
func NkHsvIv(hsv *int32) Color {
	chsv, chsvAllocMap := (*C.int)(unsafe.Pointer(hsv)), cgoAllocsUnknown
	__ret := C.nk_hsv_iv(chsv)
	runtime.KeepAlive(chsvAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvBv function as declared in nk/nuklear.h:3689
func NkHsvBv(hsv *byte) Color {
	chsv, chsvAllocMap := (*C.nk_byte)(unsafe.Pointer(hsv)), cgoAllocsUnknown
	__ret := C.nk_hsv_bv(chsv)
	runtime.KeepAlive(chsvAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvF function as declared in nk/nuklear.h:3690
func NkHsvF(h float32, s float32, v float32) Color {
	ch, chAllocMap := (C.float)(h), cgoAllocsUnknown
	cs, csAllocMap := (C.float)(s), cgoAllocsUnknown
	cv, cvAllocMap := (C.float)(v), cgoAllocsUnknown
	__ret := C.nk_hsv_f(ch, cs, cv)
	runtime.KeepAlive(cvAllocMap)
	runtime.KeepAlive(csAllocMap)
	runtime.KeepAlive(chAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvFv function as declared in nk/nuklear.h:3691
func NkHsvFv(hsv *float32) Color {
	chsv, chsvAllocMap := (*C.float)(unsafe.Pointer(hsv)), cgoAllocsUnknown
	__ret := C.nk_hsv_fv(chsv)
	runtime.KeepAlive(chsvAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsva function as declared in nk/nuklear.h:3693
func NkHsva(h int32, s int32, v int32, a int32) Color {
	ch, chAllocMap := (C.int)(h), cgoAllocsUnknown
	cs, csAllocMap := (C.int)(s), cgoAllocsUnknown
	cv, cvAllocMap := (C.int)(v), cgoAllocsUnknown
	ca, caAllocMap := (C.int)(a), cgoAllocsUnknown
	__ret := C.nk_hsva(ch, cs, cv, ca)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cvAllocMap)
	runtime.KeepAlive(csAllocMap)
	runtime.KeepAlive(chAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvaIv function as declared in nk/nuklear.h:3694
func NkHsvaIv(hsva *int32) Color {
	chsva, chsvaAllocMap := (*C.int)(unsafe.Pointer(hsva)), cgoAllocsUnknown
	__ret := C.nk_hsva_iv(chsva)
	runtime.KeepAlive(chsvaAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvaBv function as declared in nk/nuklear.h:3695
func NkHsvaBv(hsva *byte) Color {
	chsva, chsvaAllocMap := (*C.nk_byte)(unsafe.Pointer(hsva)), cgoAllocsUnknown
	__ret := C.nk_hsva_bv(chsva)
	runtime.KeepAlive(chsvaAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvaF function as declared in nk/nuklear.h:3696
func NkHsvaF(h float32, s float32, v float32, a float32) Color {
	ch, chAllocMap := (C.float)(h), cgoAllocsUnknown
	cs, csAllocMap := (C.float)(s), cgoAllocsUnknown
	cv, cvAllocMap := (C.float)(v), cgoAllocsUnknown
	ca, caAllocMap := (C.float)(a), cgoAllocsUnknown
	__ret := C.nk_hsva_f(ch, cs, cv, ca)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cvAllocMap)
	runtime.KeepAlive(csAllocMap)
	runtime.KeepAlive(chAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkHsvaFv function as declared in nk/nuklear.h:3697
func NkHsvaFv(hsva *float32) Color {
	chsva, chsvaAllocMap := (*C.float)(unsafe.Pointer(hsva)), cgoAllocsUnknown
	__ret := C.nk_hsva_fv(chsva)
	runtime.KeepAlive(chsvaAllocMap)
	__v := *(*Color)(unsafe.Pointer(&__ret))
	return __v
}

// NkColorF function as declared in nk/nuklear.h:3700
func NkColorF(r *float32, g *float32, b *float32, a *float32, arg4 Color) {
	cr, crAllocMap := (*C.float)(unsafe.Pointer(r)), cgoAllocsUnknown
	cg, cgAllocMap := (*C.float)(unsafe.Pointer(g)), cgoAllocsUnknown
	cb, cbAllocMap := (*C.float)(unsafe.Pointer(b)), cgoAllocsUnknown
	ca, caAllocMap := (*C.float)(unsafe.Pointer(a)), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	C.nk_color_f(cr, cg, cb, ca, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(cgAllocMap)
	runtime.KeepAlive(crAllocMap)
}

// NkColorFv function as declared in nk/nuklear.h:3701
func NkColorFv(rgbaOut []float32, arg1 Color) {
	crgbaOut, crgbaOutAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&rgbaOut)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_fv(crgbaOut, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(crgbaOutAllocMap)
}

// NkColorCf function as declared in nk/nuklear.h:3702
func NkColorCf(arg0 Color) Colorf {
	carg0, carg0AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	__ret := C.nk_color_cf(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Colorf)(unsafe.Pointer(&__ret))
	return __v
}

// NkColorD function as declared in nk/nuklear.h:3703
func NkColorD(r *float64, g *float64, b *float64, a *float64, arg4 Color) {
	cr, crAllocMap := (*C.double)(unsafe.Pointer(r)), cgoAllocsUnknown
	cg, cgAllocMap := (*C.double)(unsafe.Pointer(g)), cgoAllocsUnknown
	cb, cbAllocMap := (*C.double)(unsafe.Pointer(b)), cgoAllocsUnknown
	ca, caAllocMap := (*C.double)(unsafe.Pointer(a)), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	C.nk_color_d(cr, cg, cb, ca, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(cgAllocMap)
	runtime.KeepAlive(crAllocMap)
}

// NkColorDv function as declared in nk/nuklear.h:3704
func NkColorDv(rgbaOut []float64, arg1 Color) {
	crgbaOut, crgbaOutAllocMap := copyPDoubleBytes((*sliceHeader)(unsafe.Pointer(&rgbaOut)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_dv(crgbaOut, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(crgbaOutAllocMap)
}

// NkColorU32 function as declared in nk/nuklear.h:3706
func NkColorU32(arg0 Color) Uint {
	carg0, carg0AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	__ret := C.nk_color_u32(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Uint)(__ret)
	return __v
}

// NkColorHexRgba function as declared in nk/nuklear.h:3707
func NkColorHexRgba(output []byte, arg1 Color) {
	coutput, coutputAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&output)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_hex_rgba(coutput, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(coutputAllocMap)
}

// NkColorHexRgb function as declared in nk/nuklear.h:3708
func NkColorHexRgb(output []byte, arg1 Color) {
	coutput, coutputAllocMap := copyPCharBytes((*sliceHeader)(unsafe.Pointer(&output)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_hex_rgb(coutput, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(coutputAllocMap)
}

// NkColorHsvI function as declared in nk/nuklear.h:3710
func NkColorHsvI(outH *int32, outS *int32, outV *int32, arg3 Color) {
	coutH, coutHAllocMap := (*C.int)(unsafe.Pointer(outH)), cgoAllocsUnknown
	coutS, coutSAllocMap := (*C.int)(unsafe.Pointer(outS)), cgoAllocsUnknown
	coutV, coutVAllocMap := (*C.int)(unsafe.Pointer(outV)), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_color_hsv_i(coutH, coutS, coutV, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(coutVAllocMap)
	runtime.KeepAlive(coutSAllocMap)
	runtime.KeepAlive(coutHAllocMap)
}

// NkColorHsvB function as declared in nk/nuklear.h:3711
func NkColorHsvB(outH *byte, outS *byte, outV *byte, arg3 Color) {
	coutH, coutHAllocMap := (*C.nk_byte)(unsafe.Pointer(outH)), cgoAllocsUnknown
	coutS, coutSAllocMap := (*C.nk_byte)(unsafe.Pointer(outS)), cgoAllocsUnknown
	coutV, coutVAllocMap := (*C.nk_byte)(unsafe.Pointer(outV)), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_color_hsv_b(coutH, coutS, coutV, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(coutVAllocMap)
	runtime.KeepAlive(coutSAllocMap)
	runtime.KeepAlive(coutHAllocMap)
}

// NkColorHsvIv function as declared in nk/nuklear.h:3712
func NkColorHsvIv(hsvOut []int32, arg1 Color) {
	chsvOut, chsvOutAllocMap := copyPIntBytes((*sliceHeader)(unsafe.Pointer(&hsvOut)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_hsv_iv(chsvOut, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(chsvOutAllocMap)
}

// NkColorHsvBv function as declared in nk/nuklear.h:3713
func NkColorHsvBv(hsvOut []byte, arg1 Color) {
	chsvOut, chsvOutAllocMap := copyPByteBytes((*sliceHeader)(unsafe.Pointer(&hsvOut)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_hsv_bv(chsvOut, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(chsvOutAllocMap)
}

// NkColorHsvF function as declared in nk/nuklear.h:3714
func NkColorHsvF(outH *float32, outS *float32, outV *float32, arg3 Color) {
	coutH, coutHAllocMap := (*C.float)(unsafe.Pointer(outH)), cgoAllocsUnknown
	coutS, coutSAllocMap := (*C.float)(unsafe.Pointer(outS)), cgoAllocsUnknown
	coutV, coutVAllocMap := (*C.float)(unsafe.Pointer(outV)), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_color_hsv_f(coutH, coutS, coutV, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(coutVAllocMap)
	runtime.KeepAlive(coutSAllocMap)
	runtime.KeepAlive(coutHAllocMap)
}

// NkColorHsvFv function as declared in nk/nuklear.h:3715
func NkColorHsvFv(hsvOut []float32, arg1 Color) {
	chsvOut, chsvOutAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&hsvOut)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_hsv_fv(chsvOut, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(chsvOutAllocMap)
}

// NkColorHsvaI function as declared in nk/nuklear.h:3717
func NkColorHsvaI(h *int32, s *int32, v *int32, a *int32, arg4 Color) {
	ch, chAllocMap := (*C.int)(unsafe.Pointer(h)), cgoAllocsUnknown
	cs, csAllocMap := (*C.int)(unsafe.Pointer(s)), cgoAllocsUnknown
	cv, cvAllocMap := (*C.int)(unsafe.Pointer(v)), cgoAllocsUnknown
	ca, caAllocMap := (*C.int)(unsafe.Pointer(a)), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	C.nk_color_hsva_i(ch, cs, cv, ca, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cvAllocMap)
	runtime.KeepAlive(csAllocMap)
	runtime.KeepAlive(chAllocMap)
}

// NkColorHsvaB function as declared in nk/nuklear.h:3718
func NkColorHsvaB(h *byte, s *byte, v *byte, a *Byte, arg4 Color) {
	ch, chAllocMap := (*C.nk_byte)(unsafe.Pointer(h)), cgoAllocsUnknown
	cs, csAllocMap := (*C.nk_byte)(unsafe.Pointer(s)), cgoAllocsUnknown
	cv, cvAllocMap := (*C.nk_byte)(unsafe.Pointer(v)), cgoAllocsUnknown
	ca, caAllocMap := (*C.nk_byte)(unsafe.Pointer(a)), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	C.nk_color_hsva_b(ch, cs, cv, ca, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(cvAllocMap)
	runtime.KeepAlive(csAllocMap)
	runtime.KeepAlive(chAllocMap)
}

// NkColorHsvaIv function as declared in nk/nuklear.h:3719
func NkColorHsvaIv(hsvaOut []int32, arg1 Color) {
	chsvaOut, chsvaOutAllocMap := copyPIntBytes((*sliceHeader)(unsafe.Pointer(&hsvaOut)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_hsva_iv(chsvaOut, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(chsvaOutAllocMap)
}

// NkColorHsvaBv function as declared in nk/nuklear.h:3720
func NkColorHsvaBv(hsvaOut []byte, arg1 Color) {
	chsvaOut, chsvaOutAllocMap := copyPByteBytes((*sliceHeader)(unsafe.Pointer(&hsvaOut)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_hsva_bv(chsvaOut, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(chsvaOutAllocMap)
}

// NkColorHsvaF function as declared in nk/nuklear.h:3721
func NkColorHsvaF(outH *float32, outS *float32, outV *float32, outA *float32, arg4 Color) {
	coutH, coutHAllocMap := (*C.float)(unsafe.Pointer(outH)), cgoAllocsUnknown
	coutS, coutSAllocMap := (*C.float)(unsafe.Pointer(outS)), cgoAllocsUnknown
	coutV, coutVAllocMap := (*C.float)(unsafe.Pointer(outV)), cgoAllocsUnknown
	coutA, coutAAllocMap := (*C.float)(unsafe.Pointer(outA)), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	C.nk_color_hsva_f(coutH, coutS, coutV, coutA, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(coutAAllocMap)
	runtime.KeepAlive(coutVAllocMap)
	runtime.KeepAlive(coutSAllocMap)
	runtime.KeepAlive(coutHAllocMap)
}

// NkColorHsvaFv function as declared in nk/nuklear.h:3722
func NkColorHsvaFv(hsvaOut []float32, arg1 Color) {
	chsvaOut, chsvaOutAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&hsvaOut)))
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_color_hsva_fv(chsvaOut, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(chsvaOutAllocMap)
}

// NkHandlePtr function as declared in nk/nuklear.h:3728
func NkHandlePtr(arg0 unsafe.Pointer) Handle {
	carg0, carg0AllocMap := arg0, cgoAllocsUnknown
	__ret := C.nk_handle_ptr(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Handle)(unsafe.Pointer(&__ret))
	return __v
}

// NkHandleId function as declared in nk/nuklear.h:3729
func NkHandleId(arg0 int32) Handle {
	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
	__ret := C.nk_handle_id(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Handle)(unsafe.Pointer(&__ret))
	return __v
}

// NkImageHandle function as declared in nk/nuklear.h:3730
func NkImageHandle(arg0 Handle) Image {
	carg0, carg0AllocMap := *(*C.nk_handle)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	__ret := C.nk_image_handle(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Image)(unsafe.Pointer(&__ret))
	return __v
}

// NkImagePtr function as declared in nk/nuklear.h:3731
func NkImagePtr(arg0 unsafe.Pointer) Image {
	carg0, carg0AllocMap := arg0, cgoAllocsUnknown
	__ret := C.nk_image_ptr(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Image)(unsafe.Pointer(&__ret))
	return __v
}

// NkImageId function as declared in nk/nuklear.h:3732
func NkImageId(arg0 int32) Image {
	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
	__ret := C.nk_image_id(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Image)(unsafe.Pointer(&__ret))
	return __v
}

// NkImageIsSubimage function as declared in nk/nuklear.h:3733
func NkImageIsSubimage(img *Image) Bool {
	cimg, cimgAllocMap := (*C.struct_nk_image)(unsafe.Pointer(img)), cgoAllocsUnknown
	__ret := C.nk_image_is_subimage(cimg)
	runtime.KeepAlive(cimgAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkSubimagePtr function as declared in nk/nuklear.h:3734
func NkSubimagePtr(arg0 unsafe.Pointer, w Ushort, h Ushort, subRegion Rect) Image {
	carg0, carg0AllocMap := arg0, cgoAllocsUnknown
	cw, cwAllocMap := (C.nk_ushort)(w), cgoAllocsUnknown
	ch, chAllocMap := (C.nk_ushort)(h), cgoAllocsUnknown
	csubRegion, csubRegionAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&subRegion)), cgoAllocsUnknown
	__ret := C.nk_subimage_ptr(carg0, cw, ch, csubRegion)
	runtime.KeepAlive(csubRegionAllocMap)
	runtime.KeepAlive(chAllocMap)
	runtime.KeepAlive(cwAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Image)(unsafe.Pointer(&__ret))
	return __v
}

// NkSubimageId function as declared in nk/nuklear.h:3735
func NkSubimageId(arg0 int32, w Ushort, h Ushort, subRegion Rect) Image {
	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
	cw, cwAllocMap := (C.nk_ushort)(w), cgoAllocsUnknown
	ch, chAllocMap := (C.nk_ushort)(h), cgoAllocsUnknown
	csubRegion, csubRegionAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&subRegion)), cgoAllocsUnknown
	__ret := C.nk_subimage_id(carg0, cw, ch, csubRegion)
	runtime.KeepAlive(csubRegionAllocMap)
	runtime.KeepAlive(chAllocMap)
	runtime.KeepAlive(cwAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Image)(unsafe.Pointer(&__ret))
	return __v
}

// NkSubimageHandle function as declared in nk/nuklear.h:3736
func NkSubimageHandle(arg0 Handle, w Ushort, h Ushort, subRegion Rect) Image {
	carg0, carg0AllocMap := *(*C.nk_handle)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	cw, cwAllocMap := (C.nk_ushort)(w), cgoAllocsUnknown
	ch, chAllocMap := (C.nk_ushort)(h), cgoAllocsUnknown
	csubRegion, csubRegionAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&subRegion)), cgoAllocsUnknown
	__ret := C.nk_subimage_handle(carg0, cw, ch, csubRegion)
	runtime.KeepAlive(csubRegionAllocMap)
	runtime.KeepAlive(chAllocMap)
	runtime.KeepAlive(cwAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Image)(unsafe.Pointer(&__ret))
	return __v
}

// NkNineSliceHandle function as declared in nk/nuklear.h:3742
func NkNineSliceHandle(arg0 Handle, l Ushort, t Ushort, r Ushort, b Ushort) NineSlice {
	carg0, carg0AllocMap := *(*C.nk_handle)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	cl, clAllocMap := (C.nk_ushort)(l), cgoAllocsUnknown
	ct, ctAllocMap := (C.nk_ushort)(t), cgoAllocsUnknown
	cr, crAllocMap := (C.nk_ushort)(r), cgoAllocsUnknown
	cb, cbAllocMap := (C.nk_ushort)(b), cgoAllocsUnknown
	__ret := C.nk_nine_slice_handle(carg0, cl, ct, cr, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(crAllocMap)
	runtime.KeepAlive(ctAllocMap)
	runtime.KeepAlive(clAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*NineSlice)(unsafe.Pointer(&__ret))
	return __v
}

// NkNineSlicePtr function as declared in nk/nuklear.h:3743
func NkNineSlicePtr(arg0 unsafe.Pointer, l Ushort, t Ushort, r Ushort, b Ushort) NineSlice {
	carg0, carg0AllocMap := arg0, cgoAllocsUnknown
	cl, clAllocMap := (C.nk_ushort)(l), cgoAllocsUnknown
	ct, ctAllocMap := (C.nk_ushort)(t), cgoAllocsUnknown
	cr, crAllocMap := (C.nk_ushort)(r), cgoAllocsUnknown
	cb, cbAllocMap := (C.nk_ushort)(b), cgoAllocsUnknown
	__ret := C.nk_nine_slice_ptr(carg0, cl, ct, cr, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(crAllocMap)
	runtime.KeepAlive(ctAllocMap)
	runtime.KeepAlive(clAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*NineSlice)(unsafe.Pointer(&__ret))
	return __v
}

// NkNineSliceId function as declared in nk/nuklear.h:3744
func NkNineSliceId(arg0 int32, l Ushort, t Ushort, r Ushort, b Ushort) NineSlice {
	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
	cl, clAllocMap := (C.nk_ushort)(l), cgoAllocsUnknown
	ct, ctAllocMap := (C.nk_ushort)(t), cgoAllocsUnknown
	cr, crAllocMap := (C.nk_ushort)(r), cgoAllocsUnknown
	cb, cbAllocMap := (C.nk_ushort)(b), cgoAllocsUnknown
	__ret := C.nk_nine_slice_id(carg0, cl, ct, cr, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(crAllocMap)
	runtime.KeepAlive(ctAllocMap)
	runtime.KeepAlive(clAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*NineSlice)(unsafe.Pointer(&__ret))
	return __v
}

// NkNineSliceIsSub9slice function as declared in nk/nuklear.h:3745
func NkNineSliceIsSub9slice(img *NineSlice) int32 {
	cimg, cimgAllocMap := (*C.struct_nk_nine_slice)(unsafe.Pointer(img)), cgoAllocsUnknown
	__ret := C.nk_nine_slice_is_sub9slice(cimg)
	runtime.KeepAlive(cimgAllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkSub9slicePtr function as declared in nk/nuklear.h:3746
func NkSub9slicePtr(arg0 unsafe.Pointer, w Ushort, h Ushort, subRegion Rect, l Ushort, t Ushort, r Ushort, b Ushort) NineSlice {
	carg0, carg0AllocMap := arg0, cgoAllocsUnknown
	cw, cwAllocMap := (C.nk_ushort)(w), cgoAllocsUnknown
	ch, chAllocMap := (C.nk_ushort)(h), cgoAllocsUnknown
	csubRegion, csubRegionAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&subRegion)), cgoAllocsUnknown
	cl, clAllocMap := (C.nk_ushort)(l), cgoAllocsUnknown
	ct, ctAllocMap := (C.nk_ushort)(t), cgoAllocsUnknown
	cr, crAllocMap := (C.nk_ushort)(r), cgoAllocsUnknown
	cb, cbAllocMap := (C.nk_ushort)(b), cgoAllocsUnknown
	__ret := C.nk_sub9slice_ptr(carg0, cw, ch, csubRegion, cl, ct, cr, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(crAllocMap)
	runtime.KeepAlive(ctAllocMap)
	runtime.KeepAlive(clAllocMap)
	runtime.KeepAlive(csubRegionAllocMap)
	runtime.KeepAlive(chAllocMap)
	runtime.KeepAlive(cwAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*NineSlice)(unsafe.Pointer(&__ret))
	return __v
}

// NkSub9sliceId function as declared in nk/nuklear.h:3747
func NkSub9sliceId(arg0 int32, w Ushort, h Ushort, subRegion Rect, l Ushort, t Ushort, r Ushort, b Ushort) NineSlice {
	carg0, carg0AllocMap := (C.int)(arg0), cgoAllocsUnknown
	cw, cwAllocMap := (C.nk_ushort)(w), cgoAllocsUnknown
	ch, chAllocMap := (C.nk_ushort)(h), cgoAllocsUnknown
	csubRegion, csubRegionAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&subRegion)), cgoAllocsUnknown
	cl, clAllocMap := (C.nk_ushort)(l), cgoAllocsUnknown
	ct, ctAllocMap := (C.nk_ushort)(t), cgoAllocsUnknown
	cr, crAllocMap := (C.nk_ushort)(r), cgoAllocsUnknown
	cb, cbAllocMap := (C.nk_ushort)(b), cgoAllocsUnknown
	__ret := C.nk_sub9slice_id(carg0, cw, ch, csubRegion, cl, ct, cr, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(crAllocMap)
	runtime.KeepAlive(ctAllocMap)
	runtime.KeepAlive(clAllocMap)
	runtime.KeepAlive(csubRegionAllocMap)
	runtime.KeepAlive(chAllocMap)
	runtime.KeepAlive(cwAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*NineSlice)(unsafe.Pointer(&__ret))
	return __v
}

// NkSub9sliceHandle function as declared in nk/nuklear.h:3748
func NkSub9sliceHandle(arg0 Handle, w Ushort, h Ushort, subRegion Rect, l Ushort, t Ushort, r Ushort, b Ushort) NineSlice {
	carg0, carg0AllocMap := *(*C.nk_handle)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	cw, cwAllocMap := (C.nk_ushort)(w), cgoAllocsUnknown
	ch, chAllocMap := (C.nk_ushort)(h), cgoAllocsUnknown
	csubRegion, csubRegionAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&subRegion)), cgoAllocsUnknown
	cl, clAllocMap := (C.nk_ushort)(l), cgoAllocsUnknown
	ct, ctAllocMap := (C.nk_ushort)(t), cgoAllocsUnknown
	cr, crAllocMap := (C.nk_ushort)(r), cgoAllocsUnknown
	cb, cbAllocMap := (C.nk_ushort)(b), cgoAllocsUnknown
	__ret := C.nk_sub9slice_handle(carg0, cw, ch, csubRegion, cl, ct, cr, cb)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(crAllocMap)
	runtime.KeepAlive(ctAllocMap)
	runtime.KeepAlive(clAllocMap)
	runtime.KeepAlive(csubRegionAllocMap)
	runtime.KeepAlive(chAllocMap)
	runtime.KeepAlive(cwAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*NineSlice)(unsafe.Pointer(&__ret))
	return __v
}

// NkMurmurHash function as declared in nk/nuklear.h:3754
func NkMurmurHash(key unsafe.Pointer, len int32, seed Hash) Hash {
	ckey, ckeyAllocMap := key, cgoAllocsUnknown
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	cseed, cseedAllocMap := (C.nk_hash)(seed), cgoAllocsUnknown
	__ret := C.nk_murmur_hash(ckey, clen, cseed)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(ckeyAllocMap)
	__v := (Hash)(__ret)
	return __v
}

// NkTriangleFromDirection function as declared in nk/nuklear.h:3755
func NkTriangleFromDirection(result *Vec2, r Rect, padX float32, padY float32, arg4 C.enum_) {
	cresult, cresultAllocMap := (*C.struct_nk_vec2)(unsafe.Pointer(result)), cgoAllocsUnknown
	cr, crAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&r)), cgoAllocsUnknown
	cpadX, cpadXAllocMap := (C.float)(padX), cgoAllocsUnknown
	cpadY, cpadYAllocMap := (C.float)(padY), cgoAllocsUnknown
	carg4, carg4AllocMap := (C.enum_)(arg4), cgoAllocsUnknown
	C.nk_triangle_from_direction(cresult, cr, cpadX, cpadY, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(cpadYAllocMap)
	runtime.KeepAlive(cpadXAllocMap)
	runtime.KeepAlive(crAllocMap)
	runtime.KeepAlive(cresultAllocMap)
}

// NkVec2 function as declared in nk/nuklear.h:3757
func NkVec2(x float32, y float32) Vec2 {
	cx, cxAllocMap := (C.float)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.float)(y), cgoAllocsUnknown
	__ret := C.nk_vec2(cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkVec2i function as declared in nk/nuklear.h:3758
func NkVec2i(x int32, y int32) Vec2 {
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	__ret := C.nk_vec2i(cx, cy)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkVec2v function as declared in nk/nuklear.h:3759
func NkVec2v(xy *float32) Vec2 {
	cxy, cxyAllocMap := (*C.float)(unsafe.Pointer(xy)), cgoAllocsUnknown
	__ret := C.nk_vec2v(cxy)
	runtime.KeepAlive(cxyAllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkVec2iv function as declared in nk/nuklear.h:3760
func NkVec2iv(xy *int32) Vec2 {
	cxy, cxyAllocMap := (*C.int)(unsafe.Pointer(xy)), cgoAllocsUnknown
	__ret := C.nk_vec2iv(cxy)
	runtime.KeepAlive(cxyAllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkGetNullRect function as declared in nk/nuklear.h:3762
func NkGetNullRect() Rect {
	__ret := C.nk_get_null_rect()
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkRect function as declared in nk/nuklear.h:3763
func NkRect(x float32, y float32, w float32, h float32) Rect {
	cx, cxAllocMap := (C.float)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.float)(y), cgoAllocsUnknown
	cw, cwAllocMap := (C.float)(w), cgoAllocsUnknown
	ch, chAllocMap := (C.float)(h), cgoAllocsUnknown
	__ret := C.nk_rect(cx, cy, cw, ch)
	runtime.KeepAlive(chAllocMap)
	runtime.KeepAlive(cwAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkRecti function as declared in nk/nuklear.h:3764
func NkRecti(x int32, y int32, w int32, h int32) Rect {
	cx, cxAllocMap := (C.int)(x), cgoAllocsUnknown
	cy, cyAllocMap := (C.int)(y), cgoAllocsUnknown
	cw, cwAllocMap := (C.int)(w), cgoAllocsUnknown
	ch, chAllocMap := (C.int)(h), cgoAllocsUnknown
	__ret := C.nk_recti(cx, cy, cw, ch)
	runtime.KeepAlive(chAllocMap)
	runtime.KeepAlive(cwAllocMap)
	runtime.KeepAlive(cyAllocMap)
	runtime.KeepAlive(cxAllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkRecta function as declared in nk/nuklear.h:3765
func NkRecta(pos Vec2, size Vec2) Rect {
	cpos, cposAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&pos)), cgoAllocsUnknown
	csize, csizeAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&size)), cgoAllocsUnknown
	__ret := C.nk_recta(cpos, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cposAllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkRectv function as declared in nk/nuklear.h:3766
func NkRectv(xywh *float32) Rect {
	cxywh, cxywhAllocMap := (*C.float)(unsafe.Pointer(xywh)), cgoAllocsUnknown
	__ret := C.nk_rectv(cxywh)
	runtime.KeepAlive(cxywhAllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkRectiv function as declared in nk/nuklear.h:3767
func NkRectiv(xywh *int32) Rect {
	cxywh, cxywhAllocMap := (*C.int)(unsafe.Pointer(xywh)), cgoAllocsUnknown
	__ret := C.nk_rectiv(cxywh)
	runtime.KeepAlive(cxywhAllocMap)
	__v := *(*Rect)(unsafe.Pointer(&__ret))
	return __v
}

// NkRectPos function as declared in nk/nuklear.h:3768
func NkRectPos(arg0 Rect) Vec2 {
	carg0, carg0AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	__ret := C.nk_rect_pos(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkRectSize function as declared in nk/nuklear.h:3769
func NkRectSize(arg0 Rect) Vec2 {
	carg0, carg0AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	__ret := C.nk_rect_size(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*Vec2)(unsafe.Pointer(&__ret))
	return __v
}

// NkStrlen function as declared in nk/nuklear.h:3775
func NkStrlen(str string) int32 {
	str = safeString(str)
	cstr, cstrAllocMap := unpackPCharString(str)
	__ret := C.nk_strlen(cstr)
	runtime.KeepAlive(str)
	runtime.KeepAlive(cstrAllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStricmp function as declared in nk/nuklear.h:3776
func NkStricmp(s1 string, s2 string) int32 {
	s1 = safeString(s1)
	cs1, cs1AllocMap := unpackPCharString(s1)
	s2 = safeString(s2)
	cs2, cs2AllocMap := unpackPCharString(s2)
	__ret := C.nk_stricmp(cs1, cs2)
	runtime.KeepAlive(s2)
	runtime.KeepAlive(cs2AllocMap)
	runtime.KeepAlive(s1)
	runtime.KeepAlive(cs1AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStricmpn function as declared in nk/nuklear.h:3777
func NkStricmpn(s1 string, s2 string, n int32) int32 {
	s1 = safeString(s1)
	cs1, cs1AllocMap := unpackPCharString(s1)
	s2 = safeString(s2)
	cs2, cs2AllocMap := unpackPCharString(s2)
	cn, cnAllocMap := (C.int)(n), cgoAllocsUnknown
	__ret := C.nk_stricmpn(cs1, cs2, cn)
	runtime.KeepAlive(cnAllocMap)
	runtime.KeepAlive(s2)
	runtime.KeepAlive(cs2AllocMap)
	runtime.KeepAlive(s1)
	runtime.KeepAlive(cs1AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrtoi function as declared in nk/nuklear.h:3778
func NkStrtoi(str string, endptr []string) int32 {
	str = safeString(str)
	cstr, cstrAllocMap := unpackPCharString(str)
	cendptr, cendptrAllocMap := unpackArgSString(endptr)
	__ret := C.nk_strtoi(cstr, cendptr)
	packSString(endptr, cendptr)
	runtime.KeepAlive(cendptrAllocMap)
	runtime.KeepAlive(str)
	runtime.KeepAlive(cstrAllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrtof function as declared in nk/nuklear.h:3779
func NkStrtof(str string, endptr []string) float32 {
	str = safeString(str)
	cstr, cstrAllocMap := unpackPCharString(str)
	cendptr, cendptrAllocMap := unpackArgSString(endptr)
	__ret := C.nk_strtof(cstr, cendptr)
	packSString(endptr, cendptr)
	runtime.KeepAlive(cendptrAllocMap)
	runtime.KeepAlive(str)
	runtime.KeepAlive(cstrAllocMap)
	__v := (float32)(__ret)
	return __v
}

// NkStrtod function as declared in nk/nuklear.h:3782
func NkStrtod(str string, endptr []string) float64 {
	str = safeString(str)
	cstr, cstrAllocMap := unpackPCharString(str)
	cendptr, cendptrAllocMap := unpackArgSString(endptr)
	__ret := C.nk_strtod(cstr, cendptr)
	packSString(endptr, cendptr)
	runtime.KeepAlive(cendptrAllocMap)
	runtime.KeepAlive(str)
	runtime.KeepAlive(cstrAllocMap)
	__v := (float64)(__ret)
	return __v
}

// NkStrfilter function as declared in nk/nuklear.h:3784
func NkStrfilter(text string, regexp string) int32 {
	text = safeString(text)
	ctext, ctextAllocMap := unpackPCharString(text)
	regexp = safeString(regexp)
	cregexp, cregexpAllocMap := unpackPCharString(regexp)
	__ret := C.nk_strfilter(ctext, cregexp)
	runtime.KeepAlive(regexp)
	runtime.KeepAlive(cregexpAllocMap)
	runtime.KeepAlive(text)
	runtime.KeepAlive(ctextAllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrmatchFuzzyString function as declared in nk/nuklear.h:3785
func NkStrmatchFuzzyString(str string, pattern string, outScore *int32) int32 {
	str = safeString(str)
	cstr, cstrAllocMap := unpackPCharString(str)
	pattern = safeString(pattern)
	cpattern, cpatternAllocMap := unpackPCharString(pattern)
	coutScore, coutScoreAllocMap := (*C.int)(unsafe.Pointer(outScore)), cgoAllocsUnknown
	__ret := C.nk_strmatch_fuzzy_string(cstr, cpattern, coutScore)
	runtime.KeepAlive(coutScoreAllocMap)
	runtime.KeepAlive(pattern)
	runtime.KeepAlive(cpatternAllocMap)
	runtime.KeepAlive(str)
	runtime.KeepAlive(cstrAllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrmatchFuzzyText function as declared in nk/nuklear.h:3786
func NkStrmatchFuzzyText(txt string, txtLen int32, pattern string, outScore *int32) int32 {
	txt = safeString(txt)
	ctxt, ctxtAllocMap := unpackPCharString(txt)
	ctxtLen, ctxtLenAllocMap := (C.int)(txtLen), cgoAllocsUnknown
	pattern = safeString(pattern)
	cpattern, cpatternAllocMap := unpackPCharString(pattern)
	coutScore, coutScoreAllocMap := (*C.int)(unsafe.Pointer(outScore)), cgoAllocsUnknown
	__ret := C.nk_strmatch_fuzzy_text(ctxt, ctxtLen, cpattern, coutScore)
	runtime.KeepAlive(coutScoreAllocMap)
	runtime.KeepAlive(pattern)
	runtime.KeepAlive(cpatternAllocMap)
	runtime.KeepAlive(ctxtLenAllocMap)
	runtime.KeepAlive(txt)
	runtime.KeepAlive(ctxtAllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkUtfDecode function as declared in nk/nuklear.h:3792
func NkUtfDecode(arg0 *byte, arg1 *Rune, arg2 int32) int32 {
	carg0, carg0AllocMap := (*C.char)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.nk_rune)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	__ret := C.nk_utf_decode(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkUtfEncode function as declared in nk/nuklear.h:3793
func NkUtfEncode(arg0 Rune, arg1 *byte, arg2 int32) int32 {
	carg0, carg0AllocMap := (C.nk_rune)(arg0), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	__ret := C.nk_utf_encode(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkUtfLen function as declared in nk/nuklear.h:3794
func NkUtfLen(arg0 *byte, byteLen int32) int32 {
	carg0, carg0AllocMap := (*C.char)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cbyteLen, cbyteLenAllocMap := (C.int)(byteLen), cgoAllocsUnknown
	__ret := C.nk_utf_len(carg0, cbyteLen)
	runtime.KeepAlive(cbyteLenAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkUtfAt function as declared in nk/nuklear.h:3795
func NkUtfAt(buffer string, length int32, index int32, unicode *Rune, len []int32) string {
	buffer = safeString(buffer)
	cbuffer, cbufferAllocMap := unpackPCharString(buffer)
	clength, clengthAllocMap := (C.int)(length), cgoAllocsUnknown
	cindex, cindexAllocMap := (C.int)(index), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (*C.nk_rune)(unsafe.Pointer(unicode)), cgoAllocsUnknown
	clen, clenAllocMap := copyPIntBytes((*sliceHeader)(unsafe.Pointer(&len)))
	__ret := C.nk_utf_at(cbuffer, clength, cindex, cunicode, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(cindexAllocMap)
	runtime.KeepAlive(clengthAllocMap)
	runtime.KeepAlive(buffer)
	runtime.KeepAlive(cbufferAllocMap)
	__v := packPCharString(__ret)
	return __v
}

// NkFontDefaultGlyphRanges function as declared in nk/nuklear.h:4085
func NkFontDefaultGlyphRanges() *Rune {
	__ret := C.nk_font_default_glyph_ranges()
	__v := *(**Rune)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontChineseGlyphRanges function as declared in nk/nuklear.h:4086
func NkFontChineseGlyphRanges() *Rune {
	__ret := C.nk_font_chinese_glyph_ranges()
	__v := *(**Rune)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontCyrillicGlyphRanges function as declared in nk/nuklear.h:4087
func NkFontCyrillicGlyphRanges() *Rune {
	__ret := C.nk_font_cyrillic_glyph_ranges()
	__v := *(**Rune)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontKoreanGlyphRanges function as declared in nk/nuklear.h:4088
func NkFontKoreanGlyphRanges() *Rune {
	__ret := C.nk_font_korean_glyph_ranges()
	__v := *(**Rune)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasInitDefault function as declared in nk/nuklear.h:4091
func NkFontAtlasInitDefault(arg0 *FontAtlas) {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_font_atlas_init_default(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFontAtlasInit function as declared in nk/nuklear.h:4093
func NkFontAtlasInit(arg0 *FontAtlas, arg1 *Allocator) {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_allocator)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.nk_font_atlas_init(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFontAtlasInitCustom function as declared in nk/nuklear.h:4094
func NkFontAtlasInitCustom(arg0 *FontAtlas, persistent *Allocator, transient *Allocator) {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpersistent, cpersistentAllocMap := (*C.struct_nk_allocator)(unsafe.Pointer(persistent)), cgoAllocsUnknown
	ctransient, ctransientAllocMap := (*C.struct_nk_allocator)(unsafe.Pointer(transient)), cgoAllocsUnknown
	C.nk_font_atlas_init_custom(carg0, cpersistent, ctransient)
	runtime.KeepAlive(ctransientAllocMap)
	runtime.KeepAlive(cpersistentAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFontAtlasBegin function as declared in nk/nuklear.h:4095
func NkFontAtlasBegin(arg0 *FontAtlas) {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_font_atlas_begin(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFontConfig function as declared in nk/nuklear.h:4096
func NkFontConfig(pixelHeight float32) FontConfig {
	cpixelHeight, cpixelHeightAllocMap := (C.float)(pixelHeight), cgoAllocsUnknown
	__ret := C.nk_font_config(cpixelHeight)
	runtime.KeepAlive(cpixelHeightAllocMap)
	__v := *(*FontConfig)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasAdd function as declared in nk/nuklear.h:4097
func NkFontAtlasAdd(arg0 *FontAtlas, arg1 *FontConfig) *Font {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_font_config)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk_font_atlas_add(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasAddDefault function as declared in nk/nuklear.h:4099
func NkFontAtlasAddDefault(arg0 *FontAtlas, height float32, arg2 *FontConfig) *Font {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.struct_nk_font_config)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	__ret := C.nk_font_atlas_add_default(carg0, cheight, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasAddFromMemory function as declared in nk/nuklear.h:4101
func NkFontAtlasAddFromMemory(atlas *FontAtlas, memory unsafe.Pointer, size Size, height float32, config *FontConfig) *Font {
	catlas, catlasAllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(atlas)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	cconfig, cconfigAllocMap := (*C.struct_nk_font_config)(unsafe.Pointer(config)), cgoAllocsUnknown
	__ret := C.nk_font_atlas_add_from_memory(catlas, cmemory, csize, cheight, cconfig)
	runtime.KeepAlive(cconfigAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(catlasAllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasAddFromFile function as declared in nk/nuklear.h:4103
func NkFontAtlasAddFromFile(atlas *FontAtlas, filePath string, height float32, arg3 *FontConfig) *Font {
	catlas, catlasAllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(atlas)), cgoAllocsUnknown
	filePath = safeString(filePath)
	cfilePath, cfilePathAllocMap := unpackPCharString(filePath)
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	carg3, carg3AllocMap := (*C.struct_nk_font_config)(unsafe.Pointer(arg3)), cgoAllocsUnknown
	__ret := C.nk_font_atlas_add_from_file(catlas, cfilePath, cheight, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(filePath)
	runtime.KeepAlive(cfilePathAllocMap)
	runtime.KeepAlive(catlasAllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasAddCompressed function as declared in nk/nuklear.h:4105
func NkFontAtlasAddCompressed(arg0 *FontAtlas, memory unsafe.Pointer, size Size, height float32, arg4 []FontConfig) *Font {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	carg4, carg4AllocMap := copyPStructNkFontConfigBytes((*sliceHeader)(unsafe.Pointer(&arg4)))
	__ret := C.nk_font_atlas_add_compressed(carg0, cmemory, csize, cheight, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasAddCompressedBase85 function as declared in nk/nuklear.h:4106
func NkFontAtlasAddCompressedBase85(arg0 *FontAtlas, data string, height float32, config *FontConfig) *Font {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	data = safeString(data)
	cdata, cdataAllocMap := unpackPCharString(data)
	cheight, cheightAllocMap := (C.float)(height), cgoAllocsUnknown
	cconfig, cconfigAllocMap := (*C.struct_nk_font_config)(unsafe.Pointer(config)), cgoAllocsUnknown
	__ret := C.nk_font_atlas_add_compressed_base85(carg0, cdata, cheight, cconfig)
	runtime.KeepAlive(cconfigAllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(data)
	runtime.KeepAlive(cdataAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**Font)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasBake function as declared in nk/nuklear.h:4107
func NkFontAtlasBake(arg0 *FontAtlas, width *int32, height *int32, arg3 C.enum_) unsafe.Pointer {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cwidth, cwidthAllocMap := (*C.int)(unsafe.Pointer(width)), cgoAllocsUnknown
	cheight, cheightAllocMap := (*C.int)(unsafe.Pointer(height)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.enum_)(arg3), cgoAllocsUnknown
	__ret := C.nk_font_atlas_bake(carg0, cwidth, cheight, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cheightAllocMap)
	runtime.KeepAlive(cwidthAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasEnd function as declared in nk/nuklear.h:4108
func NkFontAtlasEnd(arg0 *FontAtlas, tex Handle, arg2 *DrawNullTexture) {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ctex, ctexAllocMap := *(*C.nk_handle)(unsafe.Pointer(&tex)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.struct_nk_draw_null_texture)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	C.nk_font_atlas_end(carg0, ctex, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(ctexAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFontFindGlyph function as declared in nk/nuklear.h:4109
func NkFontFindGlyph(arg0 *Font, unicode Rune) *FontGlyph {
	carg0, carg0AllocMap := (*C.struct_nk_font)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_font_find_glyph(carg0, cunicode)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**FontGlyph)(unsafe.Pointer(&__ret))
	return __v
}

// NkFontAtlasCleanup function as declared in nk/nuklear.h:4110
func NkFontAtlasCleanup(atlas *FontAtlas) {
	catlas, catlasAllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(atlas)), cgoAllocsUnknown
	C.nk_font_atlas_cleanup(catlas)
	runtime.KeepAlive(catlasAllocMap)
}

// NkFontAtlasClear function as declared in nk/nuklear.h:4111
func NkFontAtlasClear(arg0 *FontAtlas) {
	carg0, carg0AllocMap := (*C.struct_nk_font_atlas)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_font_atlas_clear(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferInitDefault function as declared in nk/nuklear.h:4197
func NkBufferInitDefault(arg0 *Buffer) {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_buffer_init_default(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferInit function as declared in nk/nuklear.h:4199
func NkBufferInit(arg0 *Buffer, arg1 *Allocator, size Size) {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_allocator)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_buffer_init(carg0, carg1, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferInitFixed function as declared in nk/nuklear.h:4200
func NkBufferInitFixed(arg0 *Buffer, memory unsafe.Pointer, size Size) {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_buffer_init_fixed(carg0, cmemory, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferInfo function as declared in nk/nuklear.h:4201
func NkBufferInfo(arg0 *MemoryStatus, arg1 *Buffer) {
	carg0, carg0AllocMap := (*C.struct_nk_memory_status)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	C.nk_buffer_info(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferPush function as declared in nk/nuklear.h:4202
func NkBufferPush(arg0 *Buffer, kind C.enum_, memory unsafe.Pointer, size Size, align Size) {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.enum_)(kind), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	calign, calignAllocMap := (C.nk_size)(align), cgoAllocsUnknown
	C.nk_buffer_push(carg0, ckind, cmemory, csize, calign)
	runtime.KeepAlive(calignAllocMap)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferMark function as declared in nk/nuklear.h:4203
func NkBufferMark(arg0 *Buffer, kind C.enum_) {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.enum_)(kind), cgoAllocsUnknown
	C.nk_buffer_mark(carg0, ckind)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferReset function as declared in nk/nuklear.h:4204
func NkBufferReset(arg0 *Buffer, kind C.enum_) {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ckind, ckindAllocMap := (C.enum_)(kind), cgoAllocsUnknown
	C.nk_buffer_reset(carg0, ckind)
	runtime.KeepAlive(ckindAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferClear function as declared in nk/nuklear.h:4205
func NkBufferClear(arg0 *Buffer) {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_buffer_clear(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferFree function as declared in nk/nuklear.h:4206
func NkBufferFree(arg0 *Buffer) {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_buffer_free(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkBufferMemory function as declared in nk/nuklear.h:4207
func NkBufferMemory(arg0 *Buffer) unsafe.Pointer {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_buffer_memory(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// NkBufferMemoryConst function as declared in nk/nuklear.h:4208
func NkBufferMemoryConst(arg0 *Buffer) unsafe.Pointer {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_buffer_memory_const(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*unsafe.Pointer)(unsafe.Pointer(&__ret))
	return __v
}

// NkBufferTotal function as declared in nk/nuklear.h:4209
func NkBufferTotal(arg0 *Buffer) Size {
	carg0, carg0AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_buffer_total(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Size)(__ret)
	return __v
}

// NkStrInitDefault function as declared in nk/nuklear.h:4227
func NkStrInitDefault(arg0 *Str) {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_str_init_default(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrInit function as declared in nk/nuklear.h:4229
func NkStrInit(arg0 *Str, arg1 *Allocator, size Size) {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_allocator)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_str_init(carg0, carg1, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrInitFixed function as declared in nk/nuklear.h:4230
func NkStrInitFixed(arg0 *Str, memory unsafe.Pointer, size Size) {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_str_init_fixed(carg0, cmemory, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrClear function as declared in nk/nuklear.h:4231
func NkStrClear(arg0 *Str) {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_str_clear(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrFree function as declared in nk/nuklear.h:4232
func NkStrFree(arg0 *Str) {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_str_free(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrAppendTextChar function as declared in nk/nuklear.h:4234
func NkStrAppendTextChar(arg0 *Str, arg1 *byte, arg2 int32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	__ret := C.nk_str_append_text_char(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrAppendStrChar function as declared in nk/nuklear.h:4235
func NkStrAppendStrChar(arg0 *Str, arg1 *byte) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk_str_append_str_char(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrAppendTextUtf8 function as declared in nk/nuklear.h:4236
func NkStrAppendTextUtf8(arg0 *Str, arg1 *byte, arg2 int32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	__ret := C.nk_str_append_text_utf8(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrAppendStrUtf8 function as declared in nk/nuklear.h:4237
func NkStrAppendStrUtf8(arg0 *Str, arg1 *byte) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk_str_append_str_utf8(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrAppendTextRunes function as declared in nk/nuklear.h:4238
func NkStrAppendTextRunes(arg0 *Str, arg1 *Rune, arg2 int32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.nk_rune)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.int)(arg2), cgoAllocsUnknown
	__ret := C.nk_str_append_text_runes(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrAppendStrRunes function as declared in nk/nuklear.h:4239
func NkStrAppendStrRunes(arg0 *Str, arg1 *Rune) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.nk_rune)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk_str_append_str_runes(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrInsertAtChar function as declared in nk/nuklear.h:4241
func NkStrInsertAtChar(arg0 *Str, pos int32, arg2 *byte, arg3 int32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	__ret := C.nk_str_insert_at_char(carg0, cpos, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrInsertAtRune function as declared in nk/nuklear.h:4242
func NkStrInsertAtRune(arg0 *Str, pos int32, arg2 *byte, arg3 int32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	__ret := C.nk_str_insert_at_rune(carg0, cpos, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrInsertTextChar function as declared in nk/nuklear.h:4244
func NkStrInsertTextChar(arg0 *Str, pos int32, arg2 *byte, arg3 int32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	__ret := C.nk_str_insert_text_char(carg0, cpos, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrInsertStrChar function as declared in nk/nuklear.h:4245
func NkStrInsertStrChar(arg0 *Str, pos int32, arg2 *byte) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	__ret := C.nk_str_insert_str_char(carg0, cpos, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrInsertTextUtf8 function as declared in nk/nuklear.h:4246
func NkStrInsertTextUtf8(arg0 *Str, pos int32, arg2 *byte, arg3 int32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	__ret := C.nk_str_insert_text_utf8(carg0, cpos, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrInsertStrUtf8 function as declared in nk/nuklear.h:4247
func NkStrInsertStrUtf8(arg0 *Str, pos int32, arg2 *byte) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.char)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	__ret := C.nk_str_insert_str_utf8(carg0, cpos, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrInsertTextRunes function as declared in nk/nuklear.h:4248
func NkStrInsertTextRunes(arg0 *Str, pos int32, arg2 *Rune, arg3 int32) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.nk_rune)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.int)(arg3), cgoAllocsUnknown
	__ret := C.nk_str_insert_text_runes(carg0, cpos, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrInsertStrRunes function as declared in nk/nuklear.h:4249
func NkStrInsertStrRunes(arg0 *Str, pos int32, arg2 *Rune) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.nk_rune)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	__ret := C.nk_str_insert_str_runes(carg0, cpos, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrRemoveChars function as declared in nk/nuklear.h:4251
func NkStrRemoveChars(arg0 *Str, len int32) {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	C.nk_str_remove_chars(carg0, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrRemoveRunes function as declared in nk/nuklear.h:4252
func NkStrRemoveRunes(str *Str, len int32) {
	cstr, cstrAllocMap := (*C.struct_nk_str)(unsafe.Pointer(str)), cgoAllocsUnknown
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	C.nk_str_remove_runes(cstr, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(cstrAllocMap)
}

// NkStrDeleteChars function as declared in nk/nuklear.h:4253
func NkStrDeleteChars(arg0 *Str, pos int32, len int32) {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	C.nk_str_delete_chars(carg0, cpos, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrDeleteRunes function as declared in nk/nuklear.h:4254
func NkStrDeleteRunes(arg0 *Str, pos int32, len int32) {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	C.nk_str_delete_runes(carg0, cpos, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrAtChar function as declared in nk/nuklear.h:4256
func NkStrAtChar(arg0 *Str, pos int32) *byte {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	__ret := C.nk_str_at_char(carg0, cpos)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// NkStrAtRune function as declared in nk/nuklear.h:4257
func NkStrAtRune(arg0 *Str, pos int32, unicode *Rune, len *int32) *byte {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (*C.nk_rune)(unsafe.Pointer(unicode)), cgoAllocsUnknown
	clen, clenAllocMap := (*C.int)(unsafe.Pointer(len)), cgoAllocsUnknown
	__ret := C.nk_str_at_rune(carg0, cpos, cunicode, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// NkStrRuneAt function as declared in nk/nuklear.h:4258
func NkStrRuneAt(arg0 *Str, pos int32) Rune {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	__ret := C.nk_str_rune_at(carg0, cpos)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Rune)(__ret)
	return __v
}

// NkStrAtCharConst function as declared in nk/nuklear.h:4259
func NkStrAtCharConst(arg0 *Str, pos int32) string {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	__ret := C.nk_str_at_char_const(carg0, cpos)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := packPCharString(__ret)
	return __v
}

// NkStrAtConst function as declared in nk/nuklear.h:4260
func NkStrAtConst(arg0 *Str, pos int32, unicode *Rune, len *int32) string {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := (C.int)(pos), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (*C.nk_rune)(unsafe.Pointer(unicode)), cgoAllocsUnknown
	clen, clenAllocMap := (*C.int)(unsafe.Pointer(len)), cgoAllocsUnknown
	__ret := C.nk_str_at_const(carg0, cpos, cunicode, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := packPCharString(__ret)
	return __v
}

// NkStrGet function as declared in nk/nuklear.h:4262
func NkStrGet(arg0 *Str) *byte {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_str_get(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**byte)(unsafe.Pointer(&__ret))
	return __v
}

// NkStrGetConst function as declared in nk/nuklear.h:4263
func NkStrGetConst(arg0 *Str) string {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_str_get_const(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := packPCharString(__ret)
	return __v
}

// NkStrLen function as declared in nk/nuklear.h:4264
func NkStrLen(arg0 *Str) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_str_len(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkStrLenChar function as declared in nk/nuklear.h:4265
func NkStrLenChar(arg0 *Str) int32 {
	carg0, carg0AllocMap := (*C.struct_nk_str)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_str_len_char(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (int32)(__ret)
	return __v
}

// NkFilterDefault function as declared in nk/nuklear.h:4359
func NkFilterDefault(arg0 *TextEdit, unicode Rune) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_default(carg0, cunicode)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkFilterAscii function as declared in nk/nuklear.h:4360
func NkFilterAscii(arg0 *TextEdit, unicode Rune) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_ascii(carg0, cunicode)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkFilterFloat function as declared in nk/nuklear.h:4361
func NkFilterFloat(arg0 *TextEdit, unicode Rune) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_float(carg0, cunicode)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkFilterDecimal function as declared in nk/nuklear.h:4362
func NkFilterDecimal(arg0 *TextEdit, unicode Rune) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_decimal(carg0, cunicode)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkFilterHex function as declared in nk/nuklear.h:4363
func NkFilterHex(arg0 *TextEdit, unicode Rune) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_hex(carg0, cunicode)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkFilterOct function as declared in nk/nuklear.h:4364
func NkFilterOct(arg0 *TextEdit, unicode Rune) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_oct(carg0, cunicode)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkFilterBinary function as declared in nk/nuklear.h:4365
func NkFilterBinary(arg0 *TextEdit, unicode Rune) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cunicode, cunicodeAllocMap := (C.nk_rune)(unicode), cgoAllocsUnknown
	__ret := C.nk_filter_binary(carg0, cunicode)
	runtime.KeepAlive(cunicodeAllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTexteditInitDefault function as declared in nk/nuklear.h:4369
func NkTexteditInitDefault(arg0 *TextEdit) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_textedit_init_default(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTexteditInit function as declared in nk/nuklear.h:4371
func NkTexteditInit(arg0 *TextEdit, arg1 *Allocator, size Size) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_allocator)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_textedit_init(carg0, carg1, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTexteditInitFixed function as declared in nk/nuklear.h:4372
func NkTexteditInitFixed(arg0 *TextEdit, memory unsafe.Pointer, size Size) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cmemory, cmemoryAllocMap := memory, cgoAllocsUnknown
	csize, csizeAllocMap := (C.nk_size)(size), cgoAllocsUnknown
	C.nk_textedit_init_fixed(carg0, cmemory, csize)
	runtime.KeepAlive(csizeAllocMap)
	runtime.KeepAlive(cmemoryAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTexteditFree function as declared in nk/nuklear.h:4373
func NkTexteditFree(arg0 *TextEdit) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_textedit_free(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTexteditText function as declared in nk/nuklear.h:4374
func NkTexteditText(arg0 *TextEdit, arg1 *byte, totalLen int32) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	ctotalLen, ctotalLenAllocMap := (C.int)(totalLen), cgoAllocsUnknown
	C.nk_textedit_text(carg0, carg1, ctotalLen)
	runtime.KeepAlive(ctotalLenAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTexteditDelete function as declared in nk/nuklear.h:4375
func NkTexteditDelete(arg0 *TextEdit, where int32, len int32) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cwhere, cwhereAllocMap := (C.int)(where), cgoAllocsUnknown
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	C.nk_textedit_delete(carg0, cwhere, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(cwhereAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTexteditDeleteSelection function as declared in nk/nuklear.h:4376
func NkTexteditDeleteSelection(arg0 *TextEdit) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_textedit_delete_selection(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTexteditSelectAll function as declared in nk/nuklear.h:4377
func NkTexteditSelectAll(arg0 *TextEdit) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_textedit_select_all(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTexteditCut function as declared in nk/nuklear.h:4378
func NkTexteditCut(arg0 *TextEdit) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	__ret := C.nk_textedit_cut(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTexteditPaste function as declared in nk/nuklear.h:4379
func NkTexteditPaste(arg0 *TextEdit, arg1 *byte, len int32) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.char)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	__ret := C.nk_textedit_paste(carg0, carg1, clen)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkTexteditUndo function as declared in nk/nuklear.h:4380
func NkTexteditUndo(arg0 *TextEdit) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_textedit_undo(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkTexteditRedo function as declared in nk/nuklear.h:4381
func NkTexteditRedo(arg0 *TextEdit) {
	carg0, carg0AllocMap := (*C.struct_nk_text_edit)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_textedit_redo(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrokeLine function as declared in nk/nuklear.h:4632
func NkStrokeLine(b *CommandBuffer, x0 float32, y0 float32, x1 float32, y1 float32, lineThickness float32, arg6 Color) {
	cb, cbAllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(b)), cgoAllocsUnknown
	cx0, cx0AllocMap := (C.float)(x0), cgoAllocsUnknown
	cy0, cy0AllocMap := (C.float)(y0), cgoAllocsUnknown
	cx1, cx1AllocMap := (C.float)(x1), cgoAllocsUnknown
	cy1, cy1AllocMap := (C.float)(y1), cgoAllocsUnknown
	clineThickness, clineThicknessAllocMap := (C.float)(lineThickness), cgoAllocsUnknown
	carg6, carg6AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg6)), cgoAllocsUnknown
	C.nk_stroke_line(cb, cx0, cy0, cx1, cy1, clineThickness, carg6)
	runtime.KeepAlive(carg6AllocMap)
	runtime.KeepAlive(clineThicknessAllocMap)
	runtime.KeepAlive(cy1AllocMap)
	runtime.KeepAlive(cx1AllocMap)
	runtime.KeepAlive(cy0AllocMap)
	runtime.KeepAlive(cx0AllocMap)
	runtime.KeepAlive(cbAllocMap)
}

// NkStrokeCurve function as declared in nk/nuklear.h:4633
func NkStrokeCurve(arg0 *CommandBuffer, arg1 float32, arg2 float32, arg3 float32, arg4 float32, arg5 float32, arg6 float32, arg7 float32, arg8 float32, lineThickness float32, arg10 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.float)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.float)(arg2), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.float)(arg3), cgoAllocsUnknown
	carg4, carg4AllocMap := (C.float)(arg4), cgoAllocsUnknown
	carg5, carg5AllocMap := (C.float)(arg5), cgoAllocsUnknown
	carg6, carg6AllocMap := (C.float)(arg6), cgoAllocsUnknown
	carg7, carg7AllocMap := (C.float)(arg7), cgoAllocsUnknown
	carg8, carg8AllocMap := (C.float)(arg8), cgoAllocsUnknown
	clineThickness, clineThicknessAllocMap := (C.float)(lineThickness), cgoAllocsUnknown
	carg10, carg10AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg10)), cgoAllocsUnknown
	C.nk_stroke_curve(carg0, carg1, carg2, carg3, carg4, carg5, carg6, carg7, carg8, clineThickness, carg10)
	runtime.KeepAlive(carg10AllocMap)
	runtime.KeepAlive(clineThicknessAllocMap)
	runtime.KeepAlive(carg8AllocMap)
	runtime.KeepAlive(carg7AllocMap)
	runtime.KeepAlive(carg6AllocMap)
	runtime.KeepAlive(carg5AllocMap)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrokeRect function as declared in nk/nuklear.h:4634
func NkStrokeRect(arg0 *CommandBuffer, arg1 Rect, rounding float32, lineThickness float32, arg4 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	crounding, croundingAllocMap := (C.float)(rounding), cgoAllocsUnknown
	clineThickness, clineThicknessAllocMap := (C.float)(lineThickness), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	C.nk_stroke_rect(carg0, carg1, crounding, clineThickness, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(clineThicknessAllocMap)
	runtime.KeepAlive(croundingAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrokeCircle function as declared in nk/nuklear.h:4635
func NkStrokeCircle(arg0 *CommandBuffer, arg1 Rect, lineThickness float32, arg3 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	clineThickness, clineThicknessAllocMap := (C.float)(lineThickness), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_stroke_circle(carg0, carg1, clineThickness, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(clineThicknessAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrokeArc function as declared in nk/nuklear.h:4636
func NkStrokeArc(arg0 *CommandBuffer, cx float32, cy float32, radius float32, aMin float32, aMax float32, lineThickness float32, arg7 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccx, ccxAllocMap := (C.float)(cx), cgoAllocsUnknown
	ccy, ccyAllocMap := (C.float)(cy), cgoAllocsUnknown
	cradius, cradiusAllocMap := (C.float)(radius), cgoAllocsUnknown
	caMin, caMinAllocMap := (C.float)(aMin), cgoAllocsUnknown
	caMax, caMaxAllocMap := (C.float)(aMax), cgoAllocsUnknown
	clineThickness, clineThicknessAllocMap := (C.float)(lineThickness), cgoAllocsUnknown
	carg7, carg7AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg7)), cgoAllocsUnknown
	C.nk_stroke_arc(carg0, ccx, ccy, cradius, caMin, caMax, clineThickness, carg7)
	runtime.KeepAlive(carg7AllocMap)
	runtime.KeepAlive(clineThicknessAllocMap)
	runtime.KeepAlive(caMaxAllocMap)
	runtime.KeepAlive(caMinAllocMap)
	runtime.KeepAlive(cradiusAllocMap)
	runtime.KeepAlive(ccyAllocMap)
	runtime.KeepAlive(ccxAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrokeTriangle function as declared in nk/nuklear.h:4637
func NkStrokeTriangle(arg0 *CommandBuffer, arg1 float32, arg2 float32, arg3 float32, arg4 float32, arg5 float32, arg6 float32, lineThichness float32, arg8 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.float)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := (C.float)(arg2), cgoAllocsUnknown
	carg3, carg3AllocMap := (C.float)(arg3), cgoAllocsUnknown
	carg4, carg4AllocMap := (C.float)(arg4), cgoAllocsUnknown
	carg5, carg5AllocMap := (C.float)(arg5), cgoAllocsUnknown
	carg6, carg6AllocMap := (C.float)(arg6), cgoAllocsUnknown
	clineThichness, clineThichnessAllocMap := (C.float)(lineThichness), cgoAllocsUnknown
	carg8, carg8AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg8)), cgoAllocsUnknown
	C.nk_stroke_triangle(carg0, carg1, carg2, carg3, carg4, carg5, carg6, clineThichness, carg8)
	runtime.KeepAlive(carg8AllocMap)
	runtime.KeepAlive(clineThichnessAllocMap)
	runtime.KeepAlive(carg6AllocMap)
	runtime.KeepAlive(carg5AllocMap)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrokePolyline function as declared in nk/nuklear.h:4638
func NkStrokePolyline(arg0 *CommandBuffer, points []float32, pointCount int32, lineThickness float32, col Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpoints, cpointsAllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&points)))
	cpointCount, cpointCountAllocMap := (C.int)(pointCount), cgoAllocsUnknown
	clineThickness, clineThicknessAllocMap := (C.float)(lineThickness), cgoAllocsUnknown
	ccol, ccolAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&col)), cgoAllocsUnknown
	C.nk_stroke_polyline(carg0, cpoints, cpointCount, clineThickness, ccol)
	runtime.KeepAlive(ccolAllocMap)
	runtime.KeepAlive(clineThicknessAllocMap)
	runtime.KeepAlive(cpointCountAllocMap)
	runtime.KeepAlive(cpointsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStrokePolygon function as declared in nk/nuklear.h:4639
func NkStrokePolygon(arg0 *CommandBuffer, arg1 []float32, pointCount int32, lineThickness float32, arg4 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&arg1)))
	cpointCount, cpointCountAllocMap := (C.int)(pointCount), cgoAllocsUnknown
	clineThickness, clineThicknessAllocMap := (C.float)(lineThickness), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	C.nk_stroke_polygon(carg0, carg1, cpointCount, clineThickness, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(clineThicknessAllocMap)
	runtime.KeepAlive(cpointCountAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFillRect function as declared in nk/nuklear.h:4642
func NkFillRect(arg0 *CommandBuffer, arg1 Rect, rounding float32, arg3 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	crounding, croundingAllocMap := (C.float)(rounding), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_fill_rect(carg0, carg1, crounding, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(croundingAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFillRectMultiColor function as declared in nk/nuklear.h:4643
func NkFillRectMultiColor(arg0 *CommandBuffer, arg1 Rect, left Color, top Color, right Color, bottom Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	cleft, cleftAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&left)), cgoAllocsUnknown
	ctop, ctopAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&top)), cgoAllocsUnknown
	cright, crightAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&right)), cgoAllocsUnknown
	cbottom, cbottomAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&bottom)), cgoAllocsUnknown
	C.nk_fill_rect_multi_color(carg0, carg1, cleft, ctop, cright, cbottom)
	runtime.KeepAlive(cbottomAllocMap)
	runtime.KeepAlive(crightAllocMap)
	runtime.KeepAlive(ctopAllocMap)
	runtime.KeepAlive(cleftAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFillCircle function as declared in nk/nuklear.h:4644
func NkFillCircle(arg0 *CommandBuffer, arg1 Rect, arg2 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	C.nk_fill_circle(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFillArc function as declared in nk/nuklear.h:4645
func NkFillArc(arg0 *CommandBuffer, cx float32, cy float32, radius float32, aMin float32, aMax float32, arg6 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccx, ccxAllocMap := (C.float)(cx), cgoAllocsUnknown
	ccy, ccyAllocMap := (C.float)(cy), cgoAllocsUnknown
	cradius, cradiusAllocMap := (C.float)(radius), cgoAllocsUnknown
	caMin, caMinAllocMap := (C.float)(aMin), cgoAllocsUnknown
	caMax, caMaxAllocMap := (C.float)(aMax), cgoAllocsUnknown
	carg6, carg6AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg6)), cgoAllocsUnknown
	C.nk_fill_arc(carg0, ccx, ccy, cradius, caMin, caMax, carg6)
	runtime.KeepAlive(carg6AllocMap)
	runtime.KeepAlive(caMaxAllocMap)
	runtime.KeepAlive(caMinAllocMap)
	runtime.KeepAlive(cradiusAllocMap)
	runtime.KeepAlive(ccyAllocMap)
	runtime.KeepAlive(ccxAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFillTriangle function as declared in nk/nuklear.h:4646
func NkFillTriangle(arg0 *CommandBuffer, x0 float32, y0 float32, x1 float32, y1 float32, x2 float32, y2 float32, arg7 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cx0, cx0AllocMap := (C.float)(x0), cgoAllocsUnknown
	cy0, cy0AllocMap := (C.float)(y0), cgoAllocsUnknown
	cx1, cx1AllocMap := (C.float)(x1), cgoAllocsUnknown
	cy1, cy1AllocMap := (C.float)(y1), cgoAllocsUnknown
	cx2, cx2AllocMap := (C.float)(x2), cgoAllocsUnknown
	cy2, cy2AllocMap := (C.float)(y2), cgoAllocsUnknown
	carg7, carg7AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg7)), cgoAllocsUnknown
	C.nk_fill_triangle(carg0, cx0, cy0, cx1, cy1, cx2, cy2, carg7)
	runtime.KeepAlive(carg7AllocMap)
	runtime.KeepAlive(cy2AllocMap)
	runtime.KeepAlive(cx2AllocMap)
	runtime.KeepAlive(cy1AllocMap)
	runtime.KeepAlive(cx1AllocMap)
	runtime.KeepAlive(cy0AllocMap)
	runtime.KeepAlive(cx0AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkFillPolygon function as declared in nk/nuklear.h:4647
func NkFillPolygon(arg0 *CommandBuffer, arg1 []float32, pointCount int32, arg3 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := copyPFloatBytes((*sliceHeader)(unsafe.Pointer(&arg1)))
	cpointCount, cpointCountAllocMap := (C.int)(pointCount), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_fill_polygon(carg0, carg1, cpointCount, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cpointCountAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawImage function as declared in nk/nuklear.h:4650
func NkDrawImage(arg0 *CommandBuffer, arg1 Rect, arg2 *Image, arg3 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.struct_nk_image)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_draw_image(carg0, carg1, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawNineSlice function as declared in nk/nuklear.h:4651
func NkDrawNineSlice(arg0 *CommandBuffer, arg1 Rect, arg2 *NineSlice, arg3 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.struct_nk_nine_slice)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_draw_nine_slice(carg0, carg1, carg2, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawText function as declared in nk/nuklear.h:4652
func NkDrawText(arg0 *CommandBuffer, arg1 Rect, text string, len int32, arg4 *UserFont, arg5 Color, arg6 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	text = safeString(text)
	ctext, ctextAllocMap := unpackPCharString(text)
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	carg4, carg4AllocMap := arg4.PassRef()
	carg5, carg5AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg5)), cgoAllocsUnknown
	carg6, carg6AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg6)), cgoAllocsUnknown
	C.nk_draw_text(carg0, carg1, ctext, clen, carg4, carg5, carg6)
	runtime.KeepAlive(carg6AllocMap)
	runtime.KeepAlive(carg5AllocMap)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(text)
	runtime.KeepAlive(ctextAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPushScissor function as declared in nk/nuklear.h:4653
func NkPushScissor(arg0 *CommandBuffer, arg1 Rect) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_push_scissor(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkPushCustom function as declared in nk/nuklear.h:4654
func NkPushCustom(arg0 *CommandBuffer, arg1 Rect, arg2 CommandCustomCallback, usr Handle) {
	carg0, carg0AllocMap := (*C.struct_nk_command_buffer)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(**[0]byte)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	cusr, cusrAllocMap := *(*C.nk_handle)(unsafe.Pointer(&usr)), cgoAllocsUnknown
	C.nk_push_custom(carg0, carg1, carg2, cusr)
	runtime.KeepAlive(cusrAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkInputHasMouseClick function as declared in nk/nuklear.h:4695
func NkInputHasMouseClick(arg0 *Input, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_has_mouse_click(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputHasMouseClickInRect function as declared in nk/nuklear.h:4696
func NkInputHasMouseClickInRect(arg0 *Input, arg1 C.enum_, arg2 Rect) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	__ret := C.nk_input_has_mouse_click_in_rect(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputHasMouseClickInButtonRect function as declared in nk/nuklear.h:4697
func NkInputHasMouseClickInButtonRect(arg0 *Input, arg1 C.enum_, arg2 Rect) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	__ret := C.nk_input_has_mouse_click_in_button_rect(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputHasMouseClickDownInRect function as declared in nk/nuklear.h:4698
func NkInputHasMouseClickDownInRect(arg0 *Input, arg1 C.enum_, arg2 Rect, down Bool) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	cdown, cdownAllocMap := (C.nk_bool)(down), cgoAllocsUnknown
	__ret := C.nk_input_has_mouse_click_down_in_rect(carg0, carg1, carg2, cdown)
	runtime.KeepAlive(cdownAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsMouseClickInRect function as declared in nk/nuklear.h:4699
func NkInputIsMouseClickInRect(arg0 *Input, arg1 C.enum_, arg2 Rect) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_click_in_rect(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsMouseClickDownInRect function as declared in nk/nuklear.h:4700
func NkInputIsMouseClickDownInRect(i *Input, id C.enum_, b Rect, down Bool) Bool {
	ci, ciAllocMap := (*C.struct_nk_input)(unsafe.Pointer(i)), cgoAllocsUnknown
	cid, cidAllocMap := (C.enum_)(id), cgoAllocsUnknown
	cb, cbAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&b)), cgoAllocsUnknown
	cdown, cdownAllocMap := (C.nk_bool)(down), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_click_down_in_rect(ci, cid, cb, cdown)
	runtime.KeepAlive(cdownAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(cidAllocMap)
	runtime.KeepAlive(ciAllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputAnyMouseClickInRect function as declared in nk/nuklear.h:4701
func NkInputAnyMouseClickInRect(arg0 *Input, arg1 Rect) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	__ret := C.nk_input_any_mouse_click_in_rect(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsMousePrevHoveringRect function as declared in nk/nuklear.h:4702
func NkInputIsMousePrevHoveringRect(arg0 *Input, arg1 Rect) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_prev_hovering_rect(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsMouseHoveringRect function as declared in nk/nuklear.h:4703
func NkInputIsMouseHoveringRect(arg0 *Input, arg1 Rect) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_hovering_rect(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputMouseClicked function as declared in nk/nuklear.h:4704
func NkInputMouseClicked(arg0 *Input, arg1 C.enum_, arg2 Rect) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	__ret := C.nk_input_mouse_clicked(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsMouseDown function as declared in nk/nuklear.h:4705
func NkInputIsMouseDown(arg0 *Input, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_down(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsMousePressed function as declared in nk/nuklear.h:4706
func NkInputIsMousePressed(arg0 *Input, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_pressed(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsMouseReleased function as declared in nk/nuklear.h:4707
func NkInputIsMouseReleased(arg0 *Input, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_mouse_released(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsKeyPressed function as declared in nk/nuklear.h:4708
func NkInputIsKeyPressed(arg0 *Input, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_key_pressed(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsKeyReleased function as declared in nk/nuklear.h:4709
func NkInputIsKeyReleased(arg0 *Input, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_key_released(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkInputIsKeyDown function as declared in nk/nuklear.h:4710
func NkInputIsKeyDown(arg0 *Input, arg1 C.enum_) Bool {
	carg0, carg0AllocMap := (*C.struct_nk_input)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (C.enum_)(arg1), cgoAllocsUnknown
	__ret := C.nk_input_is_key_down(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := (Bool)(__ret)
	return __v
}

// NkDrawListInit function as declared in nk/nuklear.h:4824
func NkDrawListInit(arg0 *DrawList) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_draw_list_init(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListSetup function as declared in nk/nuklear.h:4825
func NkDrawListSetup(arg0 *DrawList, arg1 *ConvertConfig, cmds *Buffer, vertices *Buffer, elements []Buffer, lineAa C.enum_, shapeAa C.enum_) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := arg1.PassRef()
	ccmds, ccmdsAllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(cmds)), cgoAllocsUnknown
	cvertices, cverticesAllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(vertices)), cgoAllocsUnknown
	celements, celementsAllocMap := copyPStructNkBufferBytes((*sliceHeader)(unsafe.Pointer(&elements)))
	clineAa, clineAaAllocMap := (C.enum_)(lineAa), cgoAllocsUnknown
	cshapeAa, cshapeAaAllocMap := (C.enum_)(shapeAa), cgoAllocsUnknown
	C.nk_draw_list_setup(carg0, carg1, ccmds, cvertices, celements, clineAa, cshapeAa)
	runtime.KeepAlive(cshapeAaAllocMap)
	runtime.KeepAlive(clineAaAllocMap)
	runtime.KeepAlive(celementsAllocMap)
	runtime.KeepAlive(cverticesAllocMap)
	runtime.KeepAlive(ccmdsAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// Nk_DrawListBegin function as declared in nk/nuklear.h:4829
func Nk_DrawListBegin(arg0 *DrawList, arg1 *Buffer) *DrawCommand {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk__draw_list_begin(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**DrawCommand)(unsafe.Pointer(&__ret))
	return __v
}

// Nk_DrawListNext function as declared in nk/nuklear.h:4830
func Nk_DrawListNext(arg0 *DrawCommand, arg1 *Buffer, arg2 *DrawList) *DrawCommand {
	carg0, carg0AllocMap := (*C.struct_nk_draw_command)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	carg2, carg2AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg2)), cgoAllocsUnknown
	__ret := C.nk__draw_list_next(carg0, carg1, carg2)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**DrawCommand)(unsafe.Pointer(&__ret))
	return __v
}

// Nk_DrawListEnd function as declared in nk/nuklear.h:4831
func Nk_DrawListEnd(arg0 *DrawList, arg1 *Buffer) *DrawCommand {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := (*C.struct_nk_buffer)(unsafe.Pointer(arg1)), cgoAllocsUnknown
	__ret := C.nk__draw_list_end(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(**DrawCommand)(unsafe.Pointer(&__ret))
	return __v
}

// NkDrawListPathClear function as declared in nk/nuklear.h:4834
func NkDrawListPathClear(arg0 *DrawList) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	C.nk_draw_list_path_clear(carg0)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListPathLineTo function as declared in nk/nuklear.h:4835
func NkDrawListPathLineTo(arg0 *DrawList, pos Vec2) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpos, cposAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&pos)), cgoAllocsUnknown
	C.nk_draw_list_path_line_to(carg0, cpos)
	runtime.KeepAlive(cposAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListPathArcToFast function as declared in nk/nuklear.h:4836
func NkDrawListPathArcToFast(arg0 *DrawList, center Vec2, radius float32, aMin int32, aMax int32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccenter, ccenterAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, cradiusAllocMap := (C.float)(radius), cgoAllocsUnknown
	caMin, caMinAllocMap := (C.int)(aMin), cgoAllocsUnknown
	caMax, caMaxAllocMap := (C.int)(aMax), cgoAllocsUnknown
	C.nk_draw_list_path_arc_to_fast(carg0, ccenter, cradius, caMin, caMax)
	runtime.KeepAlive(caMaxAllocMap)
	runtime.KeepAlive(caMinAllocMap)
	runtime.KeepAlive(cradiusAllocMap)
	runtime.KeepAlive(ccenterAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListPathArcTo function as declared in nk/nuklear.h:4837
func NkDrawListPathArcTo(arg0 *DrawList, center Vec2, radius float32, aMin float32, aMax float32, segments uint32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccenter, ccenterAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, cradiusAllocMap := (C.float)(radius), cgoAllocsUnknown
	caMin, caMinAllocMap := (C.float)(aMin), cgoAllocsUnknown
	caMax, caMaxAllocMap := (C.float)(aMax), cgoAllocsUnknown
	csegments, csegmentsAllocMap := (C.uint)(segments), cgoAllocsUnknown
	C.nk_draw_list_path_arc_to(carg0, ccenter, cradius, caMin, caMax, csegments)
	runtime.KeepAlive(csegmentsAllocMap)
	runtime.KeepAlive(caMaxAllocMap)
	runtime.KeepAlive(caMinAllocMap)
	runtime.KeepAlive(cradiusAllocMap)
	runtime.KeepAlive(ccenterAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListPathRectTo function as declared in nk/nuklear.h:4838
func NkDrawListPathRectTo(arg0 *DrawList, a Vec2, b Vec2, rounding float32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ca, caAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, cbAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&b)), cgoAllocsUnknown
	crounding, croundingAllocMap := (C.float)(rounding), cgoAllocsUnknown
	C.nk_draw_list_path_rect_to(carg0, ca, cb, crounding)
	runtime.KeepAlive(croundingAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListPathCurveTo function as declared in nk/nuklear.h:4839
func NkDrawListPathCurveTo(arg0 *DrawList, p2 Vec2, p3 Vec2, p4 Vec2, numSegments uint32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cp2, cp2AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&p2)), cgoAllocsUnknown
	cp3, cp3AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&p3)), cgoAllocsUnknown
	cp4, cp4AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&p4)), cgoAllocsUnknown
	cnumSegments, cnumSegmentsAllocMap := (C.uint)(numSegments), cgoAllocsUnknown
	C.nk_draw_list_path_curve_to(carg0, cp2, cp3, cp4, cnumSegments)
	runtime.KeepAlive(cnumSegmentsAllocMap)
	runtime.KeepAlive(cp4AllocMap)
	runtime.KeepAlive(cp3AllocMap)
	runtime.KeepAlive(cp2AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListPathFill function as declared in nk/nuklear.h:4840
func NkDrawListPathFill(arg0 *DrawList, arg1 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	C.nk_draw_list_path_fill(carg0, carg1)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListPathStroke function as declared in nk/nuklear.h:4841
func NkDrawListPathStroke(arg0 *DrawList, arg1 Color, closed C.enum_, thickness float32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg1)), cgoAllocsUnknown
	cclosed, cclosedAllocMap := (C.enum_)(closed), cgoAllocsUnknown
	cthickness, cthicknessAllocMap := (C.float)(thickness), cgoAllocsUnknown
	C.nk_draw_list_path_stroke(carg0, carg1, cclosed, cthickness)
	runtime.KeepAlive(cthicknessAllocMap)
	runtime.KeepAlive(cclosedAllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListStrokeLine function as declared in nk/nuklear.h:4844
func NkDrawListStrokeLine(arg0 *DrawList, a Vec2, b Vec2, arg3 Color, thickness float32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ca, caAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, cbAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&b)), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	cthickness, cthicknessAllocMap := (C.float)(thickness), cgoAllocsUnknown
	C.nk_draw_list_stroke_line(carg0, ca, cb, carg3, cthickness)
	runtime.KeepAlive(cthicknessAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListStrokeRect function as declared in nk/nuklear.h:4845
func NkDrawListStrokeRect(arg0 *DrawList, rect Rect, arg2 Color, rounding float32, thickness float32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	crect, crectAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&rect)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	crounding, croundingAllocMap := (C.float)(rounding), cgoAllocsUnknown
	cthickness, cthicknessAllocMap := (C.float)(thickness), cgoAllocsUnknown
	C.nk_draw_list_stroke_rect(carg0, crect, carg2, crounding, cthickness)
	runtime.KeepAlive(cthicknessAllocMap)
	runtime.KeepAlive(croundingAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListStrokeTriangle function as declared in nk/nuklear.h:4846
func NkDrawListStrokeTriangle(arg0 *DrawList, a Vec2, b Vec2, c Vec2, arg4 Color, thickness float32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ca, caAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, cbAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&b)), cgoAllocsUnknown
	cc, ccAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&c)), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	cthickness, cthicknessAllocMap := (C.float)(thickness), cgoAllocsUnknown
	C.nk_draw_list_stroke_triangle(carg0, ca, cb, cc, carg4, cthickness)
	runtime.KeepAlive(cthicknessAllocMap)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(ccAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListStrokeCircle function as declared in nk/nuklear.h:4847
func NkDrawListStrokeCircle(arg0 *DrawList, center Vec2, radius float32, arg3 Color, segs uint32, thickness float32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccenter, ccenterAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, cradiusAllocMap := (C.float)(radius), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	csegs, csegsAllocMap := (C.uint)(segs), cgoAllocsUnknown
	cthickness, cthicknessAllocMap := (C.float)(thickness), cgoAllocsUnknown
	C.nk_draw_list_stroke_circle(carg0, ccenter, cradius, carg3, csegs, cthickness)
	runtime.KeepAlive(cthicknessAllocMap)
	runtime.KeepAlive(csegsAllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(cradiusAllocMap)
	runtime.KeepAlive(ccenterAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListStrokeCurve function as declared in nk/nuklear.h:4848
func NkDrawListStrokeCurve(arg0 *DrawList, p0 Vec2, cp0 Vec2, cp1 Vec2, p1 Vec2, arg5 Color, segments uint32, thickness float32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccp0, ccp0AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&p0)), cgoAllocsUnknown
	cccp0, cccp0AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&cp0)), cgoAllocsUnknown
	ccp1, ccp1AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&cp1)), cgoAllocsUnknown
	cccp1, cccp1AllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&p1)), cgoAllocsUnknown
	carg5, carg5AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg5)), cgoAllocsUnknown
	csegments, csegmentsAllocMap := (C.uint)(segments), cgoAllocsUnknown
	cthickness, cthicknessAllocMap := (C.float)(thickness), cgoAllocsUnknown
	C.nk_draw_list_stroke_curve(carg0, ccp0, cccp0, ccp1, cccp1, carg5, csegments, cthickness)
	runtime.KeepAlive(cthicknessAllocMap)
	runtime.KeepAlive(csegmentsAllocMap)
	runtime.KeepAlive(carg5AllocMap)
	runtime.KeepAlive(cccp1AllocMap)
	runtime.KeepAlive(ccp1AllocMap)
	runtime.KeepAlive(cccp0AllocMap)
	runtime.KeepAlive(ccp0AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListStrokePolyLine function as declared in nk/nuklear.h:4849
func NkDrawListStrokePolyLine(arg0 *DrawList, pnts *Vec2, cnt uint32, arg3 Color, arg4 C.enum_, thickness float32, arg6 C.enum_) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpnts, cpntsAllocMap := (*C.struct_nk_vec2)(unsafe.Pointer(pnts)), cgoAllocsUnknown
	ccnt, ccntAllocMap := (C.uint)(cnt), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	carg4, carg4AllocMap := (C.enum_)(arg4), cgoAllocsUnknown
	cthickness, cthicknessAllocMap := (C.float)(thickness), cgoAllocsUnknown
	carg6, carg6AllocMap := (C.enum_)(arg6), cgoAllocsUnknown
	C.nk_draw_list_stroke_poly_line(carg0, cpnts, ccnt, carg3, carg4, cthickness, carg6)
	runtime.KeepAlive(carg6AllocMap)
	runtime.KeepAlive(cthicknessAllocMap)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(ccntAllocMap)
	runtime.KeepAlive(cpntsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListFillRect function as declared in nk/nuklear.h:4852
func NkDrawListFillRect(arg0 *DrawList, rect Rect, arg2 Color, rounding float32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	crect, crectAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&rect)), cgoAllocsUnknown
	carg2, carg2AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	crounding, croundingAllocMap := (C.float)(rounding), cgoAllocsUnknown
	C.nk_draw_list_fill_rect(carg0, crect, carg2, crounding)
	runtime.KeepAlive(croundingAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListFillRectMultiColor function as declared in nk/nuklear.h:4853
func NkDrawListFillRectMultiColor(arg0 *DrawList, rect Rect, left Color, top Color, right Color, bottom Color) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	crect, crectAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&rect)), cgoAllocsUnknown
	cleft, cleftAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&left)), cgoAllocsUnknown
	ctop, ctopAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&top)), cgoAllocsUnknown
	cright, crightAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&right)), cgoAllocsUnknown
	cbottom, cbottomAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&bottom)), cgoAllocsUnknown
	C.nk_draw_list_fill_rect_multi_color(carg0, crect, cleft, ctop, cright, cbottom)
	runtime.KeepAlive(cbottomAllocMap)
	runtime.KeepAlive(crightAllocMap)
	runtime.KeepAlive(ctopAllocMap)
	runtime.KeepAlive(cleftAllocMap)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListFillTriangle function as declared in nk/nuklear.h:4854
func NkDrawListFillTriangle(arg0 *DrawList, a Vec2, b Vec2, c Vec2, arg4 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ca, caAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&a)), cgoAllocsUnknown
	cb, cbAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&b)), cgoAllocsUnknown
	cc, ccAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&c)), cgoAllocsUnknown
	carg4, carg4AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg4)), cgoAllocsUnknown
	C.nk_draw_list_fill_triangle(carg0, ca, cb, cc, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(ccAllocMap)
	runtime.KeepAlive(cbAllocMap)
	runtime.KeepAlive(caAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListFillCircle function as declared in nk/nuklear.h:4855
func NkDrawListFillCircle(arg0 *DrawList, center Vec2, radius float32, col Color, segs uint32) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ccenter, ccenterAllocMap := *(*C.struct_nk_vec2)(unsafe.Pointer(&center)), cgoAllocsUnknown
	cradius, cradiusAllocMap := (C.float)(radius), cgoAllocsUnknown
	ccol, ccolAllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&col)), cgoAllocsUnknown
	csegs, csegsAllocMap := (C.uint)(segs), cgoAllocsUnknown
	C.nk_draw_list_fill_circle(carg0, ccenter, cradius, ccol, csegs)
	runtime.KeepAlive(csegsAllocMap)
	runtime.KeepAlive(ccolAllocMap)
	runtime.KeepAlive(cradiusAllocMap)
	runtime.KeepAlive(ccenterAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListFillPolyConvex function as declared in nk/nuklear.h:4856
func NkDrawListFillPolyConvex(arg0 *DrawList, points *Vec2, count uint32, arg3 Color, arg4 C.enum_) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	cpoints, cpointsAllocMap := (*C.struct_nk_vec2)(unsafe.Pointer(points)), cgoAllocsUnknown
	ccount, ccountAllocMap := (C.uint)(count), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	carg4, carg4AllocMap := (C.enum_)(arg4), cgoAllocsUnknown
	C.nk_draw_list_fill_poly_convex(carg0, cpoints, ccount, carg3, carg4)
	runtime.KeepAlive(carg4AllocMap)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(ccountAllocMap)
	runtime.KeepAlive(cpointsAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListAddImage function as declared in nk/nuklear.h:4859
func NkDrawListAddImage(arg0 *DrawList, texture Image, rect Rect, arg3 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	ctexture, ctextureAllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&texture)), cgoAllocsUnknown
	crect, crectAllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&rect)), cgoAllocsUnknown
	carg3, carg3AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg3)), cgoAllocsUnknown
	C.nk_draw_list_add_image(carg0, ctexture, crect, carg3)
	runtime.KeepAlive(carg3AllocMap)
	runtime.KeepAlive(crectAllocMap)
	runtime.KeepAlive(ctextureAllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkDrawListAddText function as declared in nk/nuklear.h:4860
func NkDrawListAddText(arg0 *DrawList, arg1 *UserFont, arg2 Rect, text string, len int32, fontHeight float32, arg6 Color) {
	carg0, carg0AllocMap := (*C.struct_nk_draw_list)(unsafe.Pointer(arg0)), cgoAllocsUnknown
	carg1, carg1AllocMap := arg1.PassRef()
	carg2, carg2AllocMap := *(*C.struct_nk_rect)(unsafe.Pointer(&arg2)), cgoAllocsUnknown
	text = safeString(text)
	ctext, ctextAllocMap := unpackPCharString(text)
	clen, clenAllocMap := (C.int)(len), cgoAllocsUnknown
	cfontHeight, cfontHeightAllocMap := (C.float)(fontHeight), cgoAllocsUnknown
	carg6, carg6AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg6)), cgoAllocsUnknown
	C.nk_draw_list_add_text(carg0, carg1, carg2, ctext, clen, cfontHeight, carg6)
	runtime.KeepAlive(carg6AllocMap)
	runtime.KeepAlive(cfontHeightAllocMap)
	runtime.KeepAlive(clenAllocMap)
	runtime.KeepAlive(text)
	runtime.KeepAlive(ctextAllocMap)
	runtime.KeepAlive(carg2AllocMap)
	runtime.KeepAlive(carg1AllocMap)
	runtime.KeepAlive(carg0AllocMap)
}

// NkStyleItemColor function as declared in nk/nuklear.h:5307
func NkStyleItemColor(arg0 Color) StyleItem {
	carg0, carg0AllocMap := *(*C.struct_nk_color)(unsafe.Pointer(&arg0)), cgoAllocsUnknown
	__ret := C.nk_style_item_color(carg0)
	runtime.KeepAlive(carg0AllocMap)
	__v := *(*StyleItem)(unsafe.Pointer(&__ret))
	return __v
}

// NkStyleItemImage function as declared in nk/nuklear.h:5308
func NkStyleItemImage(img Image) StyleItem {
	cimg, cimgAllocMap := *(*C.struct_nk_image)(unsafe.Pointer(&img)), cgoAllocsUnknown
	__ret := C.nk_style_item_image(cimg)
	runtime.KeepAlive(cimgAllocMap)
	__v := *(*StyleItem)(unsafe.Pointer(&__ret))
	return __v
}

// NkStyleItemNineSlice function as declared in nk/nuklear.h:5309
func NkStyleItemNineSlice(slice NineSlice) StyleItem {
	cslice, csliceAllocMap := *(*C.struct_nk_nine_slice)(unsafe.Pointer(&slice)), cgoAllocsUnknown
	__ret := C.nk_style_item_nine_slice(cslice)
	runtime.KeepAlive(csliceAllocMap)
	__v := *(*StyleItem)(unsafe.Pointer(&__ret))
	return __v
}

// NkStyleItemHide function as declared in nk/nuklear.h:5310
func NkStyleItemHide() StyleItem {
	__ret := C.nk_style_item_hide()
	__v := *(*StyleItem)(unsafe.Pointer(&__ret))
	return __v
}
